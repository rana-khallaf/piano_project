
paino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003eb8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  00003eb8  00003f2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002a0c  00000000  00000000  00003fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cd9  00000000  00000000  000069bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00007695  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000077d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007945  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000958e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000b228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b615  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bde3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ed 12 	call	0x25da	; 0x25da <main>
      7a:	0c 94 5a 1f 	jmp	0x3eb4	; 0x3eb4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e7       	ldi	r26, 0x7C	; 124
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e7       	ldi	r24, 0x7C	; 124
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidInit>:
#include "CLCD_extrachar.h"
#include <util/delay.h>


void CLCD_voidInit(void)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c6 54       	subi	r28, 0x46	; 70
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	fe 01       	movw	r30, r28
     b52:	ed 5b       	subi	r30, 0xBD	; 189
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a4 e3       	ldi	r26, 0x34	; 52
     b5c:	b2 e4       	ldi	r27, 0x42	; 66
     b5e:	80 83       	st	Z, r24
     b60:	91 83       	std	Z+1, r25	; 0x01
     b62:	a2 83       	std	Z+2, r26	; 0x02
     b64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b66:	8e 01       	movw	r16, r28
     b68:	01 5c       	subi	r16, 0xC1	; 193
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
     b6c:	fe 01       	movw	r30, r28
     b6e:	ed 5b       	subi	r30, 0xBD	; 189
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	60 81       	ld	r22, Z
     b74:	71 81       	ldd	r23, Z+1	; 0x01
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	93 81       	ldd	r25, Z+3	; 0x03
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	4a ef       	ldi	r20, 0xFA	; 250
     b80:	54 e4       	ldi	r21, 0x44	; 68
     b82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	f8 01       	movw	r30, r16
     b8c:	80 83       	st	Z, r24
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	a2 83       	std	Z+2, r26	; 0x02
     b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b94:	fe 01       	movw	r30, r28
     b96:	ff 96       	adiw	r30, 0x3f	; 63
     b98:	60 81       	ld	r22, Z
     b9a:	71 81       	ldd	r23, Z+1	; 0x01
     b9c:	82 81       	ldd	r24, Z+2	; 0x02
     b9e:	93 81       	ldd	r25, Z+3	; 0x03
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e8       	ldi	r20, 0x80	; 128
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bac:	88 23       	and	r24, r24
     bae:	2c f4       	brge	.+10     	; 0xbba <CLCD_voidInit+0x84>
		__ticks = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	9e af       	std	Y+62, r25	; 0x3e
     bb6:	8d af       	std	Y+61, r24	; 0x3d
     bb8:	46 c0       	rjmp	.+140    	; 0xc46 <CLCD_voidInit+0x110>
	else if (__tmp > 65535)
     bba:	fe 01       	movw	r30, r28
     bbc:	ff 96       	adiw	r30, 0x3f	; 63
     bbe:	60 81       	ld	r22, Z
     bc0:	71 81       	ldd	r23, Z+1	; 0x01
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	93 81       	ldd	r25, Z+3	; 0x03
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	3f ef       	ldi	r19, 0xFF	; 255
     bca:	4f e7       	ldi	r20, 0x7F	; 127
     bcc:	57 e4       	ldi	r21, 0x47	; 71
     bce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd2:	18 16       	cp	r1, r24
     bd4:	64 f5       	brge	.+88     	; 0xc2e <CLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd6:	fe 01       	movw	r30, r28
     bd8:	ed 5b       	subi	r30, 0xBD	; 189
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e af       	std	Y+62, r25	; 0x3e
     c02:	8d af       	std	Y+61, r24	; 0x3d
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <CLCD_voidInit+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c af       	std	Y+60, r25	; 0x3c
     c0c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b ad       	ldd	r24, Y+59	; 0x3b
     c10:	9c ad       	ldd	r25, Y+60	; 0x3c
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <CLCD_voidInit+0xdc>
     c16:	9c af       	std	Y+60, r25	; 0x3c
     c18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d ad       	ldd	r24, Y+61	; 0x3d
     c1c:	9e ad       	ldd	r25, Y+62	; 0x3e
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e af       	std	Y+62, r25	; 0x3e
     c22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d ad       	ldd	r24, Y+61	; 0x3d
     c26:	9e ad       	ldd	r25, Y+62	; 0x3e
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <CLCD_voidInit+0xd0>
     c2c:	16 c0       	rjmp	.+44     	; 0xc5a <CLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	fe 01       	movw	r30, r28
     c30:	ff 96       	adiw	r30, 0x3f	; 63
     c32:	60 81       	ld	r22, Z
     c34:	71 81       	ldd	r23, Z+1	; 0x01
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9e af       	std	Y+62, r25	; 0x3e
     c44:	8d af       	std	Y+61, r24	; 0x3d
     c46:	8d ad       	ldd	r24, Y+61	; 0x3d
     c48:	9e ad       	ldd	r25, Y+62	; 0x3e
     c4a:	9a af       	std	Y+58, r25	; 0x3a
     c4c:	89 af       	std	Y+57, r24	; 0x39
     c4e:	89 ad       	ldd	r24, Y+57	; 0x39
     c50:	9a ad       	ldd	r25, Y+58	; 0x3a
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <CLCD_voidInit+0x11c>
     c56:	9a af       	std	Y+58, r25	; 0x3a
     c58:	89 af       	std	Y+57, r24	; 0x39
//#if CLCD_MODE==8
	_delay_ms(45);
	DIO_voidSetPortDirection(CLCD_DATA_PORT,PORT_DIR_OUTPUT);
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	6f ef       	ldi	r22, 0xFF	; 255
     c5e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_RS,PIN_DIR_OUTPUT);
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_RW,PIN_DIR_OUTPUT);
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	41 e0       	ldi	r20, 0x01	; 1
     c72:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_EN,PIN_DIR_OUTPUT);
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	41 e0       	ldi	r20, 0x01	; 1
     c7c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPinDirection>

	//to return the cursor to his first pos in first line
	CLCD_voidSendCommand(Lcd_Home);
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e8       	ldi	r26, 0x80	; 128
     c8c:	bf e3       	ldi	r27, 0x3F	; 63
     c8e:	8d ab       	std	Y+53, r24	; 0x35
     c90:	9e ab       	std	Y+54, r25	; 0x36
     c92:	af ab       	std	Y+55, r26	; 0x37
     c94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c96:	6d a9       	ldd	r22, Y+53	; 0x35
     c98:	7e a9       	ldd	r23, Y+54	; 0x36
     c9a:	8f a9       	ldd	r24, Y+55	; 0x37
     c9c:	98 ad       	ldd	r25, Y+56	; 0x38
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	4a ef       	ldi	r20, 0xFA	; 250
     ca4:	54 e4       	ldi	r21, 0x44	; 68
     ca6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	89 ab       	std	Y+49, r24	; 0x31
     cb0:	9a ab       	std	Y+50, r25	; 0x32
     cb2:	ab ab       	std	Y+51, r26	; 0x33
     cb4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cb6:	69 a9       	ldd	r22, Y+49	; 0x31
     cb8:	7a a9       	ldd	r23, Y+50	; 0x32
     cba:	8b a9       	ldd	r24, Y+51	; 0x33
     cbc:	9c a9       	ldd	r25, Y+52	; 0x34
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e8       	ldi	r20, 0x80	; 128
     cc4:	5f e3       	ldi	r21, 0x3F	; 63
     cc6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cca:	88 23       	and	r24, r24
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <CLCD_voidInit+0x1a2>
		__ticks = 1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	98 ab       	std	Y+48, r25	; 0x30
     cd4:	8f a7       	std	Y+47, r24	; 0x2f
     cd6:	3f c0       	rjmp	.+126    	; 0xd56 <CLCD_voidInit+0x220>
	else if (__tmp > 65535)
     cd8:	69 a9       	ldd	r22, Y+49	; 0x31
     cda:	7a a9       	ldd	r23, Y+50	; 0x32
     cdc:	8b a9       	ldd	r24, Y+51	; 0x33
     cde:	9c a9       	ldd	r25, Y+52	; 0x34
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	3f ef       	ldi	r19, 0xFF	; 255
     ce4:	4f e7       	ldi	r20, 0x7F	; 127
     ce6:	57 e4       	ldi	r21, 0x47	; 71
     ce8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cec:	18 16       	cp	r1, r24
     cee:	4c f5       	brge	.+82     	; 0xd42 <CLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf0:	6d a9       	ldd	r22, Y+53	; 0x35
     cf2:	7e a9       	ldd	r23, Y+54	; 0x36
     cf4:	8f a9       	ldd	r24, Y+55	; 0x37
     cf6:	98 ad       	ldd	r25, Y+56	; 0x38
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e2       	ldi	r20, 0x20	; 32
     cfe:	51 e4       	ldi	r21, 0x41	; 65
     d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	cd 01       	movw	r24, r26
     d0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	98 ab       	std	Y+48, r25	; 0x30
     d16:	8f a7       	std	Y+47, r24	; 0x2f
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <CLCD_voidInit+0x202>
     d1a:	88 ec       	ldi	r24, 0xC8	; 200
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9e a7       	std	Y+46, r25	; 0x2e
     d20:	8d a7       	std	Y+45, r24	; 0x2d
     d22:	8d a5       	ldd	r24, Y+45	; 0x2d
     d24:	9e a5       	ldd	r25, Y+46	; 0x2e
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <CLCD_voidInit+0x1f0>
     d2a:	9e a7       	std	Y+46, r25	; 0x2e
     d2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d30:	98 a9       	ldd	r25, Y+48	; 0x30
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	98 ab       	std	Y+48, r25	; 0x30
     d36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d38:	8f a5       	ldd	r24, Y+47	; 0x2f
     d3a:	98 a9       	ldd	r25, Y+48	; 0x30
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	69 f7       	brne	.-38     	; 0xd1a <CLCD_voidInit+0x1e4>
     d40:	14 c0       	rjmp	.+40     	; 0xd6a <CLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d42:	69 a9       	ldd	r22, Y+49	; 0x31
     d44:	7a a9       	ldd	r23, Y+50	; 0x32
     d46:	8b a9       	ldd	r24, Y+51	; 0x33
     d48:	9c a9       	ldd	r25, Y+52	; 0x34
     d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	98 ab       	std	Y+48, r25	; 0x30
     d54:	8f a7       	std	Y+47, r24	; 0x2f
     d56:	8f a5       	ldd	r24, Y+47	; 0x2f
     d58:	98 a9       	ldd	r25, Y+48	; 0x30
     d5a:	9c a7       	std	Y+44, r25	; 0x2c
     d5c:	8b a7       	std	Y+43, r24	; 0x2b
     d5e:	8b a5       	ldd	r24, Y+43	; 0x2b
     d60:	9c a5       	ldd	r25, Y+44	; 0x2c
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <CLCD_voidInit+0x22c>
     d66:	9c a7       	std	Y+44, r25	; 0x2c
     d68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	CLCD_voidSendCommand(EIGHT_BITS);
     d6a:	88 e3       	ldi	r24, 0x38	; 56
     d6c:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a0 e8       	ldi	r26, 0x80	; 128
     d76:	bf e3       	ldi	r27, 0x3F	; 63
     d78:	8f a3       	std	Y+39, r24	; 0x27
     d7a:	98 a7       	std	Y+40, r25	; 0x28
     d7c:	a9 a7       	std	Y+41, r26	; 0x29
     d7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d80:	6f a1       	ldd	r22, Y+39	; 0x27
     d82:	78 a5       	ldd	r23, Y+40	; 0x28
     d84:	89 a5       	ldd	r24, Y+41	; 0x29
     d86:	9a a5       	ldd	r25, Y+42	; 0x2a
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	4a ef       	ldi	r20, 0xFA	; 250
     d8e:	54 e4       	ldi	r21, 0x44	; 68
     d90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	8b a3       	std	Y+35, r24	; 0x23
     d9a:	9c a3       	std	Y+36, r25	; 0x24
     d9c:	ad a3       	std	Y+37, r26	; 0x25
     d9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     da0:	6b a1       	ldd	r22, Y+35	; 0x23
     da2:	7c a1       	ldd	r23, Y+36	; 0x24
     da4:	8d a1       	ldd	r24, Y+37	; 0x25
     da6:	9e a1       	ldd	r25, Y+38	; 0x26
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e8       	ldi	r20, 0x80	; 128
     dae:	5f e3       	ldi	r21, 0x3F	; 63
     db0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     db4:	88 23       	and	r24, r24
     db6:	2c f4       	brge	.+10     	; 0xdc2 <CLCD_voidInit+0x28c>
		__ticks = 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	9a a3       	std	Y+34, r25	; 0x22
     dbe:	89 a3       	std	Y+33, r24	; 0x21
     dc0:	3f c0       	rjmp	.+126    	; 0xe40 <CLCD_voidInit+0x30a>
	else if (__tmp > 65535)
     dc2:	6b a1       	ldd	r22, Y+35	; 0x23
     dc4:	7c a1       	ldd	r23, Y+36	; 0x24
     dc6:	8d a1       	ldd	r24, Y+37	; 0x25
     dc8:	9e a1       	ldd	r25, Y+38	; 0x26
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	57 e4       	ldi	r21, 0x47	; 71
     dd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	4c f5       	brge	.+82     	; 0xe2c <CLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dda:	6f a1       	ldd	r22, Y+39	; 0x27
     ddc:	78 a5       	ldd	r23, Y+40	; 0x28
     dde:	89 a5       	ldd	r24, Y+41	; 0x29
     de0:	9a a5       	ldd	r25, Y+42	; 0x2a
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e2       	ldi	r20, 0x20	; 32
     de8:	51 e4       	ldi	r21, 0x41	; 65
     dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	bc 01       	movw	r22, r24
     df4:	cd 01       	movw	r24, r26
     df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	9a a3       	std	Y+34, r25	; 0x22
     e00:	89 a3       	std	Y+33, r24	; 0x21
     e02:	0f c0       	rjmp	.+30     	; 0xe22 <CLCD_voidInit+0x2ec>
     e04:	88 ec       	ldi	r24, 0xC8	; 200
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	98 a3       	std	Y+32, r25	; 0x20
     e0a:	8f 8f       	std	Y+31, r24	; 0x1f
     e0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e0e:	98 a1       	ldd	r25, Y+32	; 0x20
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <CLCD_voidInit+0x2da>
     e14:	98 a3       	std	Y+32, r25	; 0x20
     e16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e18:	89 a1       	ldd	r24, Y+33	; 0x21
     e1a:	9a a1       	ldd	r25, Y+34	; 0x22
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	9a a3       	std	Y+34, r25	; 0x22
     e20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e22:	89 a1       	ldd	r24, Y+33	; 0x21
     e24:	9a a1       	ldd	r25, Y+34	; 0x22
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	69 f7       	brne	.-38     	; 0xe04 <CLCD_voidInit+0x2ce>
     e2a:	14 c0       	rjmp	.+40     	; 0xe54 <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2c:	6b a1       	ldd	r22, Y+35	; 0x23
     e2e:	7c a1       	ldd	r23, Y+36	; 0x24
     e30:	8d a1       	ldd	r24, Y+37	; 0x25
     e32:	9e a1       	ldd	r25, Y+38	; 0x26
     e34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9a a3       	std	Y+34, r25	; 0x22
     e3e:	89 a3       	std	Y+33, r24	; 0x21
     e40:	89 a1       	ldd	r24, Y+33	; 0x21
     e42:	9a a1       	ldd	r25, Y+34	; 0x22
     e44:	9e 8f       	std	Y+30, r25	; 0x1e
     e46:	8d 8f       	std	Y+29, r24	; 0x1d
     e48:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <CLCD_voidInit+0x316>
     e50:	9e 8f       	std	Y+30, r25	; 0x1e
     e52:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	CLCD_voidSendCommand(Lcd_DisplayOn_CursorOff);
     e54:	8c e0       	ldi	r24, 0x0C	; 12
     e56:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	a0 e8       	ldi	r26, 0x80	; 128
     e60:	bf e3       	ldi	r27, 0x3F	; 63
     e62:	89 8f       	std	Y+25, r24	; 0x19
     e64:	9a 8f       	std	Y+26, r25	; 0x1a
     e66:	ab 8f       	std	Y+27, r26	; 0x1b
     e68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e6a:	69 8d       	ldd	r22, Y+25	; 0x19
     e6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e70:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4a ef       	ldi	r20, 0xFA	; 250
     e78:	54 e4       	ldi	r21, 0x44	; 68
     e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	8d 8b       	std	Y+21, r24	; 0x15
     e84:	9e 8b       	std	Y+22, r25	; 0x16
     e86:	af 8b       	std	Y+23, r26	; 0x17
     e88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e8a:	6d 89       	ldd	r22, Y+21	; 0x15
     e8c:	7e 89       	ldd	r23, Y+22	; 0x16
     e8e:	8f 89       	ldd	r24, Y+23	; 0x17
     e90:	98 8d       	ldd	r25, Y+24	; 0x18
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e8       	ldi	r20, 0x80	; 128
     e98:	5f e3       	ldi	r21, 0x3F	; 63
     e9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e9e:	88 23       	and	r24, r24
     ea0:	2c f4       	brge	.+10     	; 0xeac <CLCD_voidInit+0x376>
		__ticks = 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9c 8b       	std	Y+20, r25	; 0x14
     ea8:	8b 8b       	std	Y+19, r24	; 0x13
     eaa:	3f c0       	rjmp	.+126    	; 0xf2a <CLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
     eac:	6d 89       	ldd	r22, Y+21	; 0x15
     eae:	7e 89       	ldd	r23, Y+22	; 0x16
     eb0:	8f 89       	ldd	r24, Y+23	; 0x17
     eb2:	98 8d       	ldd	r25, Y+24	; 0x18
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	3f ef       	ldi	r19, 0xFF	; 255
     eb8:	4f e7       	ldi	r20, 0x7F	; 127
     eba:	57 e4       	ldi	r21, 0x47	; 71
     ebc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ec0:	18 16       	cp	r1, r24
     ec2:	4c f5       	brge	.+82     	; 0xf16 <CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec4:	69 8d       	ldd	r22, Y+25	; 0x19
     ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9c 8b       	std	Y+20, r25	; 0x14
     eea:	8b 8b       	std	Y+19, r24	; 0x13
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <CLCD_voidInit+0x3d6>
     eee:	88 ec       	ldi	r24, 0xC8	; 200
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9a 8b       	std	Y+18, r25	; 0x12
     ef4:	89 8b       	std	Y+17, r24	; 0x11
     ef6:	89 89       	ldd	r24, Y+17	; 0x11
     ef8:	9a 89       	ldd	r25, Y+18	; 0x12
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <CLCD_voidInit+0x3c4>
     efe:	9a 8b       	std	Y+18, r25	; 0x12
     f00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f02:	8b 89       	ldd	r24, Y+19	; 0x13
     f04:	9c 89       	ldd	r25, Y+20	; 0x14
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	9c 8b       	std	Y+20, r25	; 0x14
     f0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0c:	8b 89       	ldd	r24, Y+19	; 0x13
     f0e:	9c 89       	ldd	r25, Y+20	; 0x14
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	69 f7       	brne	.-38     	; 0xeee <CLCD_voidInit+0x3b8>
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <CLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f16:	6d 89       	ldd	r22, Y+21	; 0x15
     f18:	7e 89       	ldd	r23, Y+22	; 0x16
     f1a:	8f 89       	ldd	r24, Y+23	; 0x17
     f1c:	98 8d       	ldd	r25, Y+24	; 0x18
     f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	9c 8b       	std	Y+20, r25	; 0x14
     f28:	8b 8b       	std	Y+19, r24	; 0x13
     f2a:	8b 89       	ldd	r24, Y+19	; 0x13
     f2c:	9c 89       	ldd	r25, Y+20	; 0x14
     f2e:	98 8b       	std	Y+16, r25	; 0x10
     f30:	8f 87       	std	Y+15, r24	; 0x0f
     f32:	8f 85       	ldd	r24, Y+15	; 0x0f
     f34:	98 89       	ldd	r25, Y+16	; 0x10
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <CLCD_voidInit+0x400>
     f3a:	98 8b       	std	Y+16, r25	; 0x10
     f3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	CLCD_voidClearScreen();
     f3e:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>

	CLCD_voidSendCommand(Lcd_EntryMode);
     f42:	86 e0       	ldi	r24, 0x06	; 6
     f44:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e8       	ldi	r26, 0x80	; 128
     f4e:	bf e3       	ldi	r27, 0x3F	; 63
     f50:	8b 87       	std	Y+11, r24	; 0x0b
     f52:	9c 87       	std	Y+12, r25	; 0x0c
     f54:	ad 87       	std	Y+13, r26	; 0x0d
     f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f58:	6b 85       	ldd	r22, Y+11	; 0x0b
     f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	4a ef       	ldi	r20, 0xFA	; 250
     f66:	54 e4       	ldi	r21, 0x44	; 68
     f68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	8f 83       	std	Y+7, r24	; 0x07
     f72:	98 87       	std	Y+8, r25	; 0x08
     f74:	a9 87       	std	Y+9, r26	; 0x09
     f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f78:	6f 81       	ldd	r22, Y+7	; 0x07
     f7a:	78 85       	ldd	r23, Y+8	; 0x08
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e8       	ldi	r20, 0x80	; 128
     f86:	5f e3       	ldi	r21, 0x3F	; 63
     f88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f8c:	88 23       	and	r24, r24
     f8e:	2c f4       	brge	.+10     	; 0xf9a <CLCD_voidInit+0x464>
		__ticks = 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9e 83       	std	Y+6, r25	; 0x06
     f96:	8d 83       	std	Y+5, r24	; 0x05
     f98:	3f c0       	rjmp	.+126    	; 0x1018 <CLCD_voidInit+0x4e2>
	else if (__tmp > 65535)
     f9a:	6f 81       	ldd	r22, Y+7	; 0x07
     f9c:	78 85       	ldd	r23, Y+8	; 0x08
     f9e:	89 85       	ldd	r24, Y+9	; 0x09
     fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	3f ef       	ldi	r19, 0xFF	; 255
     fa6:	4f e7       	ldi	r20, 0x7F	; 127
     fa8:	57 e4       	ldi	r21, 0x47	; 71
     faa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fae:	18 16       	cp	r1, r24
     fb0:	4c f5       	brge	.+82     	; 0x1004 <CLCD_voidInit+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e2       	ldi	r20, 0x20	; 32
     fc0:	51 e4       	ldi	r21, 0x41	; 65
     fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	bc 01       	movw	r22, r24
     fcc:	cd 01       	movw	r24, r26
     fce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
     fda:	0f c0       	rjmp	.+30     	; 0xffa <CLCD_voidInit+0x4c4>
     fdc:	88 ec       	ldi	r24, 0xC8	; 200
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	8b 83       	std	Y+3, r24	; 0x03
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <CLCD_voidInit+0x4b2>
     fec:	9c 83       	std	Y+4, r25	; 0x04
     fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	9e 83       	std	Y+6, r25	; 0x06
     ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	69 f7       	brne	.-38     	; 0xfdc <CLCD_voidInit+0x4a6>
    1002:	14 c0       	rjmp	.+40     	; 0x102c <CLCD_voidInit+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <CLCD_voidInit+0x4ee>
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01

//#elif CLCD_MODE==4
//#endif


}
    102c:	ca 5b       	subi	r28, 0xBA	; 186
    102e:	df 4f       	sbci	r29, 0xFF	; 255
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	08 95       	ret

00001044 <CLCD_voidSendData>:



void CLCD_voidSendData(u8 Copy_u8Data)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	2f 97       	sbiw	r28, 0x0f	; 15
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	8f 87       	std	Y+15, r24	; 0x0f

//#if CLCD_MODE==8
DIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	6f 85       	ldd	r22, Y+15	; 0x0f
    105e:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS,PIN_VAL_HIGH);
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW,PIN_VAL_LOW);
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>

CLCD_voidSendFallingEdge();
    1076:	0e 94 1e 0a 	call	0x143c	; 0x143c <CLCD_voidSendFallingEdge>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	8b 87       	std	Y+11, r24	; 0x0b
    1084:	9c 87       	std	Y+12, r25	; 0x0c
    1086:	ad 87       	std	Y+13, r26	; 0x0d
    1088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6b 85       	ldd	r22, Y+11	; 0x0b
    108c:	7c 85       	ldd	r23, Y+12	; 0x0c
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	9e 85       	ldd	r25, Y+14	; 0x0e
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a ef       	ldi	r20, 0xFA	; 250
    1098:	54 e4       	ldi	r21, 0x44	; 68
    109a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	a9 87       	std	Y+9, r26	; 0x09
    10a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <CLCD_voidSendData+0x88>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <CLCD_voidSendData+0x106>
	else if (__tmp > 65535)
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <CLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0f c0       	rjmp	.+30     	; 0x112c <CLCD_voidSendData+0xe8>
    110e:	88 ec       	ldi	r24, 0xC8	; 200
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <CLCD_voidSendData+0xd6>
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <CLCD_voidSendData+0xca>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <CLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <CLCD_voidSendData+0x112>
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
//#endif
_delay_ms(1);



}
    115e:	2f 96       	adiw	r28, 0x0f	; 15
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <CLCD_voidSendCommand>:



void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	2f 97       	sbiw	r28, 0x0f	; 15
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	8f 87       	std	Y+15, r24	; 0x0f
//#if CLCD_MODE==8
DIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	6f 85       	ldd	r22, Y+15	; 0x0f
    118a:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS,PIN_VAL_LOW);
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW,PIN_VAL_LOW);
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	61 e0       	ldi	r22, 0x01	; 1
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>

CLCD_voidSendFallingEdge();
    11a2:	0e 94 1e 0a 	call	0x143c	; 0x143c <CLCD_voidSendFallingEdge>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 e8       	ldi	r26, 0x80	; 128
    11ac:	bf e3       	ldi	r27, 0x3F	; 63
    11ae:	8b 87       	std	Y+11, r24	; 0x0b
    11b0:	9c 87       	std	Y+12, r25	; 0x0c
    11b2:	ad 87       	std	Y+13, r26	; 0x0d
    11b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    11bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4a ef       	ldi	r20, 0xFA	; 250
    11c4:	54 e4       	ldi	r21, 0x44	; 68
    11c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	8f 83       	std	Y+7, r24	; 0x07
    11d0:	98 87       	std	Y+8, r25	; 0x08
    11d2:	a9 87       	std	Y+9, r26	; 0x09
    11d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d6:	6f 81       	ldd	r22, Y+7	; 0x07
    11d8:	78 85       	ldd	r23, Y+8	; 0x08
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11ea:	88 23       	and	r24, r24
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    11f8:	6f 81       	ldd	r22, Y+7	; 0x07
    11fa:	78 85       	ldd	r23, Y+8	; 0x08
    11fc:	89 85       	ldd	r24, Y+9	; 0x09
    11fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    120c:	18 16       	cp	r1, r24
    120e:	4c f5       	brge	.+82     	; 0x1262 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	6b 85       	ldd	r22, Y+11	; 0x0b
    1212:	7c 85       	ldd	r23, Y+12	; 0x0c
    1214:	8d 85       	ldd	r24, Y+13	; 0x0d
    1216:	9e 85       	ldd	r25, Y+14	; 0x0e
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e2       	ldi	r20, 0x20	; 32
    121e:	51 e4       	ldi	r21, 0x41	; 65
    1220:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	0f c0       	rjmp	.+30     	; 0x1258 <CLCD_voidSendCommand+0xe8>
    123a:	88 ec       	ldi	r24, 0xC8	; 200
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9c 83       	std	Y+4, r25	; 0x04
    1240:	8b 83       	std	Y+3, r24	; 0x03
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <CLCD_voidSendCommand+0xd6>
    124a:	9c 83       	std	Y+4, r25	; 0x04
    124c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	9e 83       	std	Y+6, r25	; 0x06
    1256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f7       	brne	.-38     	; 0x123a <CLCD_voidSendCommand+0xca>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9e 83       	std	Y+6, r25	; 0x06
    1274:	8d 83       	std	Y+5, r24	; 0x05
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <CLCD_voidSendCommand+0x112>
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
//#elif CLCD_MODE==4

//#endif
_delay_ms(1);

	}
    128a:	2f 96       	adiw	r28, 0x0f	; 15
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <CLCD_voidSendString>:

void CLCD_voidSendString(const u8 *Copy_u8PtrString)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <CLCD_voidSendString+0x6>
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	9b 83       	std	Y+3, r25	; 0x03
    12aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Iterator=0;
    12ac:	19 82       	std	Y+1, r1	; 0x01
    12ae:	0e c0       	rjmp	.+28     	; 0x12cc <CLCD_voidSendString+0x30>

	while(Copy_u8PtrString[LOC_u8Iterator]!='\0')
	{
		CLCD_voidSendData(Copy_u8PtrString[LOC_u8Iterator]);
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	fc 01       	movw	r30, r24
    12bc:	e2 0f       	add	r30, r18
    12be:	f3 1f       	adc	r31, r19
    12c0:	80 81       	ld	r24, Z
    12c2:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>
		LOC_u8Iterator++;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const u8 *Copy_u8PtrString)
{
	u8 LOC_u8Iterator=0;

	while(Copy_u8PtrString[LOC_u8Iterator]!='\0')
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	9b 81       	ldd	r25, Y+3	; 0x03
    12d6:	fc 01       	movw	r30, r24
    12d8:	e2 0f       	add	r30, r18
    12da:	f3 1f       	adc	r31, r19
    12dc:	80 81       	ld	r24, Z
    12de:	88 23       	and	r24, r24
    12e0:	39 f7       	brne	.-50     	; 0x12b0 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_u8PtrString[LOC_u8Iterator]);
		LOC_u8Iterator++;

	}

}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <CLCD_voidSetPosition>:

*/


void CLCD_voidSetPosition(u8 Copy_u8X, u8 Copy_u8Y)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <CLCD_voidSetPosition+0x6>
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	8a 83       	std	Y+2, r24	; 0x02
    12fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Position = 0;
    12fe:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8X ==CLCD_ROW_1)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	19 f4       	brne	.+6      	; 0x130c <CLCD_voidSetPosition+0x1e>
	{
		Local_u8Position=Copy_u8Y;
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <CLCD_voidSetPosition+0x2a>
	}
	else if (Copy_u8X ==CLCD_ROW_2)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	19 f4       	brne	.+6      	; 0x1318 <CLCD_voidSetPosition+0x2a>
	{
		Local_u8Position = Copy_u8Y +0x40;
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	80 5c       	subi	r24, 0xC0	; 192
    1316:	89 83       	std	Y+1, r24	; 0x01
	}

	CLCD_voidSendCommand(Local_u8Position+Lcd_SetCursor); // Set DDRAM Address
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	80 58       	subi	r24, 0x80	; 128
    131c:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <CLCD_voidClearScreen>:




void CLCD_voidClearScreen(void)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	2e 97       	sbiw	r28, 0x0e	; 14
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(Lcd_Clear);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a0 e2       	ldi	r26, 0x20	; 32
    134c:	b1 e4       	ldi	r27, 0x41	; 65
    134e:	8b 87       	std	Y+11, r24	; 0x0b
    1350:	9c 87       	std	Y+12, r25	; 0x0c
    1352:	ad 87       	std	Y+13, r26	; 0x0d
    1354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1356:	6b 85       	ldd	r22, Y+11	; 0x0b
    1358:	7c 85       	ldd	r23, Y+12	; 0x0c
    135a:	8d 85       	ldd	r24, Y+13	; 0x0d
    135c:	9e 85       	ldd	r25, Y+14	; 0x0e
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	4a ef       	ldi	r20, 0xFA	; 250
    1364:	54 e4       	ldi	r21, 0x44	; 68
    1366:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	8f 83       	std	Y+7, r24	; 0x07
    1370:	98 87       	std	Y+8, r25	; 0x08
    1372:	a9 87       	std	Y+9, r26	; 0x09
    1374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1376:	6f 81       	ldd	r22, Y+7	; 0x07
    1378:	78 85       	ldd	r23, Y+8	; 0x08
    137a:	89 85       	ldd	r24, Y+9	; 0x09
    137c:	9a 85       	ldd	r25, Y+10	; 0x0a
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e8       	ldi	r20, 0x80	; 128
    1384:	5f e3       	ldi	r21, 0x3F	; 63
    1386:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    138a:	88 23       	and	r24, r24
    138c:	2c f4       	brge	.+10     	; 0x1398 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	3f c0       	rjmp	.+126    	; 0x1416 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	3f ef       	ldi	r19, 0xFF	; 255
    13a4:	4f e7       	ldi	r20, 0x7F	; 127
    13a6:	57 e4       	ldi	r21, 0x47	; 71
    13a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13ac:	18 16       	cp	r1, r24
    13ae:	4c f5       	brge	.+82     	; 0x1402 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e2       	ldi	r20, 0x20	; 32
    13be:	51 e4       	ldi	r21, 0x41	; 65
    13c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <CLCD_voidClearScreen+0xcc>
    13da:	88 ec       	ldi	r24, 0xC8	; 200
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <CLCD_voidClearScreen+0xba>
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	69 f7       	brne	.-38     	; 0x13da <CLCD_voidClearScreen+0xae>
    1400:	14 c0       	rjmp	.+40     	; 0x142a <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1402:	6f 81       	ldd	r22, Y+7	; 0x07
    1404:	78 85       	ldd	r23, Y+8	; 0x08
    1406:	89 85       	ldd	r24, Y+9	; 0x09
    1408:	9a 85       	ldd	r25, Y+10	; 0x0a
    140a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <CLCD_voidClearScreen+0xf6>
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); //MORE THAN 1,53ms

}
    142a:	2e 96       	adiw	r28, 0x0e	; 14
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <CLCD_voidSendFallingEdge>:



static void CLCD_voidSendFallingEdge(void)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	6c 97       	sbiw	r28, 0x1c	; 28
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_EN,PIN_VAL_HIGH);
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	62 e0       	ldi	r22, 0x02	; 2
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a0 e8       	ldi	r26, 0x80	; 128
    1460:	bf e3       	ldi	r27, 0x3F	; 63
    1462:	89 8f       	std	Y+25, r24	; 0x19
    1464:	9a 8f       	std	Y+26, r25	; 0x1a
    1466:	ab 8f       	std	Y+27, r26	; 0x1b
    1468:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146a:	69 8d       	ldd	r22, Y+25	; 0x19
    146c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    146e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1470:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4a ef       	ldi	r20, 0xFA	; 250
    1478:	54 e4       	ldi	r21, 0x44	; 68
    147a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	8d 8b       	std	Y+21, r24	; 0x15
    1484:	9e 8b       	std	Y+22, r25	; 0x16
    1486:	af 8b       	std	Y+23, r26	; 0x17
    1488:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    148a:	6d 89       	ldd	r22, Y+21	; 0x15
    148c:	7e 89       	ldd	r23, Y+22	; 0x16
    148e:	8f 89       	ldd	r24, Y+23	; 0x17
    1490:	98 8d       	ldd	r25, Y+24	; 0x18
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e8       	ldi	r20, 0x80	; 128
    1498:	5f e3       	ldi	r21, 0x3F	; 63
    149a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    149e:	88 23       	and	r24, r24
    14a0:	2c f4       	brge	.+10     	; 0x14ac <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9c 8b       	std	Y+20, r25	; 0x14
    14a8:	8b 8b       	std	Y+19, r24	; 0x13
    14aa:	3f c0       	rjmp	.+126    	; 0x152a <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    14ac:	6d 89       	ldd	r22, Y+21	; 0x15
    14ae:	7e 89       	ldd	r23, Y+22	; 0x16
    14b0:	8f 89       	ldd	r24, Y+23	; 0x17
    14b2:	98 8d       	ldd	r25, Y+24	; 0x18
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	4f e7       	ldi	r20, 0x7F	; 127
    14ba:	57 e4       	ldi	r21, 0x47	; 71
    14bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14c0:	18 16       	cp	r1, r24
    14c2:	4c f5       	brge	.+82     	; 0x1516 <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c4:	69 8d       	ldd	r22, Y+25	; 0x19
    14c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e2       	ldi	r20, 0x20	; 32
    14d2:	51 e4       	ldi	r21, 0x41	; 65
    14d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9c 8b       	std	Y+20, r25	; 0x14
    14ea:	8b 8b       	std	Y+19, r24	; 0x13
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <CLCD_voidSendFallingEdge+0xd0>
    14ee:	88 ec       	ldi	r24, 0xC8	; 200
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9a 8b       	std	Y+18, r25	; 0x12
    14f4:	89 8b       	std	Y+17, r24	; 0x11
    14f6:	89 89       	ldd	r24, Y+17	; 0x11
    14f8:	9a 89       	ldd	r25, Y+18	; 0x12
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <CLCD_voidSendFallingEdge+0xbe>
    14fe:	9a 8b       	std	Y+18, r25	; 0x12
    1500:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1502:	8b 89       	ldd	r24, Y+19	; 0x13
    1504:	9c 89       	ldd	r25, Y+20	; 0x14
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	9c 8b       	std	Y+20, r25	; 0x14
    150a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	8b 89       	ldd	r24, Y+19	; 0x13
    150e:	9c 89       	ldd	r25, Y+20	; 0x14
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	69 f7       	brne	.-38     	; 0x14ee <CLCD_voidSendFallingEdge+0xb2>
    1514:	14 c0       	rjmp	.+40     	; 0x153e <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1516:	6d 89       	ldd	r22, Y+21	; 0x15
    1518:	7e 89       	ldd	r23, Y+22	; 0x16
    151a:	8f 89       	ldd	r24, Y+23	; 0x17
    151c:	98 8d       	ldd	r25, Y+24	; 0x18
    151e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9c 8b       	std	Y+20, r25	; 0x14
    1528:	8b 8b       	std	Y+19, r24	; 0x13
    152a:	8b 89       	ldd	r24, Y+19	; 0x13
    152c:	9c 89       	ldd	r25, Y+20	; 0x14
    152e:	98 8b       	std	Y+16, r25	; 0x10
    1530:	8f 87       	std	Y+15, r24	; 0x0f
    1532:	8f 85       	ldd	r24, Y+15	; 0x0f
    1534:	98 89       	ldd	r25, Y+16	; 0x10
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <CLCD_voidSendFallingEdge+0xfa>
    153a:	98 8b       	std	Y+16, r25	; 0x10
    153c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);


	DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_EN,PIN_VAL_LOW);
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	62 e0       	ldi	r22, 0x02	; 2
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a0 e8       	ldi	r26, 0x80	; 128
    154e:	bf e3       	ldi	r27, 0x3F	; 63
    1550:	8b 87       	std	Y+11, r24	; 0x0b
    1552:	9c 87       	std	Y+12, r25	; 0x0c
    1554:	ad 87       	std	Y+13, r26	; 0x0d
    1556:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1558:	6b 85       	ldd	r22, Y+11	; 0x0b
    155a:	7c 85       	ldd	r23, Y+12	; 0x0c
    155c:	8d 85       	ldd	r24, Y+13	; 0x0d
    155e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a ef       	ldi	r20, 0xFA	; 250
    1566:	54 e4       	ldi	r21, 0x44	; 68
    1568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	8f 83       	std	Y+7, r24	; 0x07
    1572:	98 87       	std	Y+8, r25	; 0x08
    1574:	a9 87       	std	Y+9, r26	; 0x09
    1576:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1578:	6f 81       	ldd	r22, Y+7	; 0x07
    157a:	78 85       	ldd	r23, Y+8	; 0x08
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    158c:	88 23       	and	r24, r24
    158e:	2c f4       	brge	.+10     	; 0x159a <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	4c f5       	brge	.+82     	; 0x1604 <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <CLCD_voidSendFallingEdge+0x1be>
    15dc:	88 ec       	ldi	r24, 0xC8	; 200
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9c 83       	std	Y+4, r25	; 0x04
    15e2:	8b 83       	std	Y+3, r24	; 0x03
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <CLCD_voidSendFallingEdge+0x1ac>
    15ec:	9c 83       	std	Y+4, r25	; 0x04
    15ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	9e 83       	std	Y+6, r25	; 0x06
    15f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	69 f7       	brne	.-38     	; 0x15dc <CLCD_voidSendFallingEdge+0x1a0>
    1602:	14 c0       	rjmp	.+40     	; 0x162c <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1604:	6f 81       	ldd	r22, Y+7	; 0x07
    1606:	78 85       	ldd	r23, Y+8	; 0x08
    1608:	89 85       	ldd	r24, Y+9	; 0x09
    160a:	9a 85       	ldd	r25, Y+10	; 0x0a
    160c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <CLCD_voidSendFallingEdge+0x1e8>
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);


}
    162c:	6c 96       	adiw	r28, 0x1c	; 28
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <CLCD_voidSendExtraChar>:


// you enter the position of display the (row,col),and the num of digits from
//array you want to display
void CLCD_voidSendExtraChar(u8 Copy_u8Row ,u8 Copy_u8Col,u8 size)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <CLCD_voidSendExtraChar+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <CLCD_voidSendExtraChar+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	6b 83       	std	Y+3, r22	; 0x03
    164e:	4c 83       	std	Y+4, r20	; 0x04
	u8 lOC_u8Iterator=0;
    1650:	19 82       	std	Y+1, r1	; 0x01


	CLCD_voidSendCommand(Lcd_CGRAM);
    1652:	80 e4       	ldi	r24, 0x40	; 64
    1654:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>



	for(lOC_u8Iterator=0;lOC_u8Iterator<(sizeof(CLCD_u8ExtraChar)/sizeof(CLCD_u8ExtraChar[0]));lOC_u8Iterator++)
    1658:	19 82       	std	Y+1, r1	; 0x01
    165a:	0c c0       	rjmp	.+24     	; 0x1674 <CLCD_voidSendExtraChar+0x36>
	{
		CLCD_voidSendData(CLCD_u8ExtraChar[lOC_u8Iterator]);
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	88 2f       	mov	r24, r24
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	fc 01       	movw	r30, r24
    1664:	ec 57       	subi	r30, 0x7C	; 124
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 81       	ld	r24, Z
    166a:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>

	CLCD_voidSendCommand(Lcd_CGRAM);



	for(lOC_u8Iterator=0;lOC_u8Iterator<(sizeof(CLCD_u8ExtraChar)/sizeof(CLCD_u8ExtraChar[0]));lOC_u8Iterator++)
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	80 34       	cpi	r24, 0x40	; 64
    1678:	88 f3       	brcs	.-30     	; 0x165c <CLCD_voidSendExtraChar+0x1e>



	}

	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	6b 81       	ldd	r22, Y+3	; 0x03
    167e:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

	for(lOC_u8Iterator=0;lOC_u8Iterator<size;lOC_u8Iterator++)
    1682:	19 82       	std	Y+1, r1	; 0x01
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <CLCD_voidSendExtraChar+0x54>
	{
		CLCD_voidSendData(lOC_u8Iterator);
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>

	}

	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);

	for(lOC_u8Iterator=0;lOC_u8Iterator<size;lOC_u8Iterator++)
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	99 81       	ldd	r25, Y+1	; 0x01
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	98 17       	cp	r25, r24
    1698:	b0 f3       	brcs	.-20     	; 0x1686 <CLCD_voidSendExtraChar+0x48>





}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <CLCD_voidSendNum>:


/*********************************************************************************************************/

void CLCD_voidSendNum(u16 Copy_u16Num)
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	2e 97       	sbiw	r28, 0x0e	; 14
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	9e 87       	std	Y+14, r25	; 0x0e
    16be:	8d 87       	std	Y+13, r24	; 0x0d
	u8 Local_u8Arr[10];
	u8 Local_u8Iterator1=0,Local_u8Iterator2;
    16c0:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u16Num==0)
    16c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	11 f5       	brne	.+68     	; 0x170e <CLCD_voidSendNum+0x66>
	{
		CLCD_voidSendData('0');
    16ca:	80 e3       	ldi	r24, 0x30	; 48
    16cc:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>
    16d0:	22 c0       	rjmp	.+68     	; 0x1716 <CLCD_voidSendNum+0x6e>
	}
	else
	{
		while(Copy_u16Num)
		{
			Local_u8Arr[Local_u8Iterator1]=Copy_u16Num%10 + '0';
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	e8 2f       	mov	r30, r24
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16da:	9e 85       	ldd	r25, Y+14	; 0x0e
    16dc:	2a e0       	ldi	r18, 0x0A	; 10
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	b9 01       	movw	r22, r18
    16e2:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__udivmodhi4>
    16e6:	28 2f       	mov	r18, r24
    16e8:	20 5d       	subi	r18, 0xD0	; 208
    16ea:	ce 01       	movw	r24, r28
    16ec:	03 96       	adiw	r24, 0x03	; 3
    16ee:	e8 0f       	add	r30, r24
    16f0:	f9 1f       	adc	r31, r25
    16f2:	20 83       	st	Z, r18
			Copy_u16Num/=10;
    16f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f8:	2a e0       	ldi	r18, 0x0A	; 10
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	b9 01       	movw	r22, r18
    16fe:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__udivmodhi4>
    1702:	cb 01       	movw	r24, r22
    1704:	9e 87       	std	Y+14, r25	; 0x0e
    1706:	8d 87       	std	Y+13, r24	; 0x0d
			Local_u8Iterator1++;
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	8f 5f       	subi	r24, 0xFF	; 255
    170c:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
	}
	else
	{
		while(Copy_u16Num)
    170e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1710:	9e 85       	ldd	r25, Y+14	; 0x0e
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	f1 f6       	brne	.-68     	; 0x16d2 <CLCD_voidSendNum+0x2a>
			Local_u8Arr[Local_u8Iterator1]=Copy_u16Num%10 + '0';
			Copy_u16Num/=10;
			Local_u8Iterator1++;
		}
	}
	for(Local_u8Iterator2=Local_u8Iterator1;Local_u8Iterator2>0;Local_u8Iterator2--)
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	11 c0       	rjmp	.+34     	; 0x173e <CLCD_voidSendNum+0x96>
	{
		CLCD_voidSendData(Local_u8Arr[Local_u8Iterator2-1]);
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9c 01       	movw	r18, r24
    1724:	21 50       	subi	r18, 0x01	; 1
    1726:	30 40       	sbci	r19, 0x00	; 0
    1728:	ce 01       	movw	r24, r28
    172a:	03 96       	adiw	r24, 0x03	; 3
    172c:	fc 01       	movw	r30, r24
    172e:	e2 0f       	add	r30, r18
    1730:	f3 1f       	adc	r31, r19
    1732:	80 81       	ld	r24, Z
    1734:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>
			Local_u8Arr[Local_u8Iterator1]=Copy_u16Num%10 + '0';
			Copy_u16Num/=10;
			Local_u8Iterator1++;
		}
	}
	for(Local_u8Iterator2=Local_u8Iterator1;Local_u8Iterator2>0;Local_u8Iterator2--)
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	81 50       	subi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	88 23       	and	r24, r24
    1742:	61 f7       	brne	.-40     	; 0x171c <CLCD_voidSendNum+0x74>
	{
		CLCD_voidSendData(Local_u8Arr[Local_u8Iterator2-1]);
	}

}
    1744:	2e 96       	adiw	r28, 0x0e	; 14
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <DIO_voidSetPortDirection>:
			#include "DIO_config.h"
			#include "DIO_interface.h"
			#include "DIO_private.h"

			void DIO_voidSetPortDirection(u8 Copy_u8PORT,u8 Copy_u8DIRECTION)
			{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <DIO_voidSetPortDirection+0x6>
    175c:	00 d0       	rcall	.+0      	; 0x175e <DIO_voidSetPortDirection+0x8>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	6a 83       	std	Y+2, r22	; 0x02
				if(DIO_PORTD>=Copy_u8PORT)
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	90 f5       	brcc	.+100    	; 0x17d0 <DIO_voidSetPortDirection+0x7a>
				{
					switch(Copy_u8PORT)
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	3c 83       	std	Y+4, r19	; 0x04
    1774:	2b 83       	std	Y+3, r18	; 0x03
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	91 05       	cpc	r25, r1
    177e:	d1 f0       	breq	.+52     	; 0x17b4 <DIO_voidSetPortDirection+0x5e>
    1780:	2b 81       	ldd	r18, Y+3	; 0x03
    1782:	3c 81       	ldd	r19, Y+4	; 0x04
    1784:	22 30       	cpi	r18, 0x02	; 2
    1786:	31 05       	cpc	r19, r1
    1788:	2c f4       	brge	.+10     	; 0x1794 <DIO_voidSetPortDirection+0x3e>
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	61 f0       	breq	.+24     	; 0x17aa <DIO_voidSetPortDirection+0x54>
    1792:	1e c0       	rjmp	.+60     	; 0x17d0 <DIO_voidSetPortDirection+0x7a>
    1794:	2b 81       	ldd	r18, Y+3	; 0x03
    1796:	3c 81       	ldd	r19, Y+4	; 0x04
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	81 f0       	breq	.+32     	; 0x17be <DIO_voidSetPortDirection+0x68>
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	83 30       	cpi	r24, 0x03	; 3
    17a4:	91 05       	cpc	r25, r1
    17a6:	81 f0       	breq	.+32     	; 0x17c8 <DIO_voidSetPortDirection+0x72>
    17a8:	13 c0       	rjmp	.+38     	; 0x17d0 <DIO_voidSetPortDirection+0x7a>
					{
					case DIO_PORTA: DDRA=Copy_u8DIRECTION;break;
    17aa:	ea e3       	ldi	r30, 0x3A	; 58
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	80 83       	st	Z, r24
    17b2:	0e c0       	rjmp	.+28     	; 0x17d0 <DIO_voidSetPortDirection+0x7a>
					case DIO_PORTB: DDRB=Copy_u8DIRECTION;break;
    17b4:	e7 e3       	ldi	r30, 0x37	; 55
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	80 83       	st	Z, r24
    17bc:	09 c0       	rjmp	.+18     	; 0x17d0 <DIO_voidSetPortDirection+0x7a>
					case DIO_PORTC: DDRC=Copy_u8DIRECTION;break;
    17be:	e4 e3       	ldi	r30, 0x34	; 52
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	80 83       	st	Z, r24
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <DIO_voidSetPortDirection+0x7a>
					case DIO_PORTD: DDRD=Copy_u8DIRECTION;break;
    17c8:	e1 e3       	ldi	r30, 0x31	; 49
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	80 83       	st	Z, r24
					}


				}

			}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <DIO_voidSetPortValue>:




			void DIO_voidSetPortValue(u8 Copy_u8PORT,u8 Copy_u8VALUE)
			{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <DIO_voidSetPortValue+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <DIO_voidSetPortValue+0x8>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	6a 83       	std	Y+2, r22	; 0x02
				if((DIO_PORTD>=Copy_u8PORT)&&(255>=Copy_u8VALUE||PORT_VAL_HIGH==Copy_u8VALUE||PORT_VAL_LOW==Copy_u8VALUE))
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	84 30       	cpi	r24, 0x04	; 4
    17f2:	90 f5       	brcc	.+100    	; 0x1858 <DIO_voidSetPortValue+0x7a>
					{
						switch(Copy_u8PORT)
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	3c 83       	std	Y+4, r19	; 0x04
    17fc:	2b 83       	std	Y+3, r18	; 0x03
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	91 05       	cpc	r25, r1
    1806:	d1 f0       	breq	.+52     	; 0x183c <DIO_voidSetPortValue+0x5e>
    1808:	2b 81       	ldd	r18, Y+3	; 0x03
    180a:	3c 81       	ldd	r19, Y+4	; 0x04
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	2c f4       	brge	.+10     	; 0x181c <DIO_voidSetPortValue+0x3e>
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	61 f0       	breq	.+24     	; 0x1832 <DIO_voidSetPortValue+0x54>
    181a:	1e c0       	rjmp	.+60     	; 0x1858 <DIO_voidSetPortValue+0x7a>
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	22 30       	cpi	r18, 0x02	; 2
    1822:	31 05       	cpc	r19, r1
    1824:	81 f0       	breq	.+32     	; 0x1846 <DIO_voidSetPortValue+0x68>
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	83 30       	cpi	r24, 0x03	; 3
    182c:	91 05       	cpc	r25, r1
    182e:	81 f0       	breq	.+32     	; 0x1850 <DIO_voidSetPortValue+0x72>
    1830:	13 c0       	rjmp	.+38     	; 0x1858 <DIO_voidSetPortValue+0x7a>
						{
						case DIO_PORTA: PORTA= Copy_u8VALUE;break;
    1832:	eb e3       	ldi	r30, 0x3B	; 59
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	80 83       	st	Z, r24
    183a:	0e c0       	rjmp	.+28     	; 0x1858 <DIO_voidSetPortValue+0x7a>
						case DIO_PORTB: PORTB= Copy_u8VALUE;break;
    183c:	e8 e3       	ldi	r30, 0x38	; 56
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	80 83       	st	Z, r24
    1844:	09 c0       	rjmp	.+18     	; 0x1858 <DIO_voidSetPortValue+0x7a>
						case DIO_PORTC: PORTC= Copy_u8VALUE;break;
    1846:	e5 e3       	ldi	r30, 0x35	; 53
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	80 83       	st	Z, r24
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <DIO_voidSetPortValue+0x7a>
						case DIO_PORTD: PORTD= Copy_u8VALUE;break;
    1850:	e2 e3       	ldi	r30, 0x32	; 50
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	80 83       	st	Z, r24

						}

					}

			}
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <DIO_voidTogglePortValue>:



			void DIO_voidTogglePortValue(u8 Copy_u8PORT)
			{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	00 d0       	rcall	.+0      	; 0x186c <DIO_voidTogglePortValue+0x6>
    186c:	0f 92       	push	r0
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	89 83       	std	Y+1, r24	; 0x01
				if(DIO_PORTD>=Copy_u8PORT)
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	84 30       	cpi	r24, 0x04	; 4
    1878:	08 f0       	brcs	.+2      	; 0x187c <DIO_voidTogglePortValue+0x16>
    187a:	3e c0       	rjmp	.+124    	; 0x18f8 <DIO_voidTogglePortValue+0x92>
				{
					switch(Copy_u8PORT)
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	3b 83       	std	Y+3, r19	; 0x03
    1884:	2a 83       	std	Y+2, r18	; 0x02
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	9b 81       	ldd	r25, Y+3	; 0x03
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	91 05       	cpc	r25, r1
    188e:	e9 f0       	breq	.+58     	; 0x18ca <DIO_voidTogglePortValue+0x64>
    1890:	2a 81       	ldd	r18, Y+2	; 0x02
    1892:	3b 81       	ldd	r19, Y+3	; 0x03
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	2c f4       	brge	.+10     	; 0x18a4 <DIO_voidTogglePortValue+0x3e>
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	9b 81       	ldd	r25, Y+3	; 0x03
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	61 f0       	breq	.+24     	; 0x18ba <DIO_voidTogglePortValue+0x54>
    18a2:	2a c0       	rjmp	.+84     	; 0x18f8 <DIO_voidTogglePortValue+0x92>
    18a4:	2a 81       	ldd	r18, Y+2	; 0x02
    18a6:	3b 81       	ldd	r19, Y+3	; 0x03
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	b1 f0       	breq	.+44     	; 0x18da <DIO_voidTogglePortValue+0x74>
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	9b 81       	ldd	r25, Y+3	; 0x03
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	91 05       	cpc	r25, r1
    18b6:	c9 f0       	breq	.+50     	; 0x18ea <DIO_voidTogglePortValue+0x84>
    18b8:	1f c0       	rjmp	.+62     	; 0x18f8 <DIO_voidTogglePortValue+0x92>
					{
					case DIO_PORTA: PORTA=~PORTA;break;
    18ba:	ab e3       	ldi	r26, 0x3B	; 59
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	eb e3       	ldi	r30, 0x3B	; 59
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	80 95       	com	r24
    18c6:	8c 93       	st	X, r24
    18c8:	17 c0       	rjmp	.+46     	; 0x18f8 <DIO_voidTogglePortValue+0x92>
					case DIO_PORTB: PORTB=~PORTB;break;
    18ca:	a8 e3       	ldi	r26, 0x38	; 56
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e8 e3       	ldi	r30, 0x38	; 56
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	80 95       	com	r24
    18d6:	8c 93       	st	X, r24
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <DIO_voidTogglePortValue+0x92>
					case DIO_PORTC: PORTC=~PORTC;break;
    18da:	a5 e3       	ldi	r26, 0x35	; 53
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e5 e3       	ldi	r30, 0x35	; 53
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	80 95       	com	r24
    18e6:	8c 93       	st	X, r24
    18e8:	07 c0       	rjmp	.+14     	; 0x18f8 <DIO_voidTogglePortValue+0x92>
					case DIO_PORTD: PORTD=~PORTD;break;
    18ea:	a2 e3       	ldi	r26, 0x32	; 50
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e2 e3       	ldi	r30, 0x32	; 50
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	80 95       	com	r24
    18f6:	8c 93       	st	X, r24



				}

			}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <DIO_voidClearPortValue>:


			void DIO_voidClearPortValue(u8 Copy_u8PORT)
			{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <DIO_voidClearPortValue+0x6>
    190a:	0f 92       	push	r0
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	89 83       	std	Y+1, r24	; 0x01

				if(DIO_PORTD>=Copy_u8PORT)
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	84 30       	cpi	r24, 0x04	; 4
    1916:	70 f5       	brcc	.+92     	; 0x1974 <DIO_voidClearPortValue+0x70>
						{
							switch(Copy_u8PORT)
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	3b 83       	std	Y+3, r19	; 0x03
    1920:	2a 83       	std	Y+2, r18	; 0x02
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	9b 81       	ldd	r25, Y+3	; 0x03
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	c9 f0       	breq	.+50     	; 0x195e <DIO_voidClearPortValue+0x5a>
    192c:	2a 81       	ldd	r18, Y+2	; 0x02
    192e:	3b 81       	ldd	r19, Y+3	; 0x03
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	2c f4       	brge	.+10     	; 0x1940 <DIO_voidClearPortValue+0x3c>
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 f0       	breq	.+24     	; 0x1956 <DIO_voidClearPortValue+0x52>
    193e:	1a c0       	rjmp	.+52     	; 0x1974 <DIO_voidClearPortValue+0x70>
    1940:	2a 81       	ldd	r18, Y+2	; 0x02
    1942:	3b 81       	ldd	r19, Y+3	; 0x03
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	71 f0       	breq	.+28     	; 0x1966 <DIO_voidClearPortValue+0x62>
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	9b 81       	ldd	r25, Y+3	; 0x03
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	69 f0       	breq	.+26     	; 0x196e <DIO_voidClearPortValue+0x6a>
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <DIO_voidClearPortValue+0x70>
							{
							case DIO_PORTA: PORTA=PORT_VAL_LOW;break;
    1956:	eb e3       	ldi	r30, 0x3B	; 59
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	10 82       	st	Z, r1
    195c:	0b c0       	rjmp	.+22     	; 0x1974 <DIO_voidClearPortValue+0x70>
							case DIO_PORTB: PORTB=PORT_VAL_LOW;break;
    195e:	e8 e3       	ldi	r30, 0x38	; 56
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	10 82       	st	Z, r1
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <DIO_voidClearPortValue+0x70>
							case DIO_PORTC: PORTC=PORT_VAL_LOW;break;
    1966:	e5 e3       	ldi	r30, 0x35	; 53
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	10 82       	st	Z, r1
    196c:	03 c0       	rjmp	.+6      	; 0x1974 <DIO_voidClearPortValue+0x70>
							case DIO_PORTD: PORTD=PORT_VAL_LOW;break;
    196e:	e2 e3       	ldi	r30, 0x32	; 50
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	10 82       	st	Z, r1


						}


			}
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <DIO_voidSetPinDirection>:

			/*************************************************************PIN FUNCTIONS****************************************************************/


			void DIO_voidSetPinDirection(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8DIRECTION)
			{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	27 97       	sbiw	r28, 0x07	; 7
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	6a 83       	std	Y+2, r22	; 0x02
    1998:	4b 83       	std	Y+3, r20	; 0x03
				if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	84 30       	cpi	r24, 0x04	; 4
    199e:	08 f0       	brcs	.+2      	; 0x19a2 <DIO_voidSetPinDirection+0x22>
    19a0:	ee c0       	rjmp	.+476    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	88 30       	cpi	r24, 0x08	; 8
    19a6:	08 f0       	brcs	.+2      	; 0x19aa <DIO_voidSetPinDirection+0x2a>
    19a8:	ea c0       	rjmp	.+468    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
				{
					if(PIN_DIR_INPUT==Copy_u8DIRECTION)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	88 23       	and	r24, r24
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <DIO_voidSetPinDirection+0x32>
    19b0:	74 c0       	rjmp	.+232    	; 0x1a9a <DIO_voidSetPinDirection+0x11a>
					{
						switch(Copy_u8PORT)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	3f 83       	std	Y+7, r19	; 0x07
    19ba:	2e 83       	std	Y+6, r18	; 0x06
    19bc:	8e 81       	ldd	r24, Y+6	; 0x06
    19be:	9f 81       	ldd	r25, Y+7	; 0x07
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	91 05       	cpc	r25, r1
    19c4:	59 f1       	breq	.+86     	; 0x1a1c <DIO_voidSetPinDirection+0x9c>
    19c6:	2e 81       	ldd	r18, Y+6	; 0x06
    19c8:	3f 81       	ldd	r19, Y+7	; 0x07
    19ca:	22 30       	cpi	r18, 0x02	; 2
    19cc:	31 05       	cpc	r19, r1
    19ce:	2c f4       	brge	.+10     	; 0x19da <DIO_voidSetPinDirection+0x5a>
    19d0:	8e 81       	ldd	r24, Y+6	; 0x06
    19d2:	9f 81       	ldd	r25, Y+7	; 0x07
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	69 f0       	breq	.+26     	; 0x19f2 <DIO_voidSetPinDirection+0x72>
    19d8:	d2 c0       	rjmp	.+420    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
    19da:	2e 81       	ldd	r18, Y+6	; 0x06
    19dc:	3f 81       	ldd	r19, Y+7	; 0x07
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	89 f1       	breq	.+98     	; 0x1a46 <DIO_voidSetPinDirection+0xc6>
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	9f 81       	ldd	r25, Y+7	; 0x07
    19e8:	83 30       	cpi	r24, 0x03	; 3
    19ea:	91 05       	cpc	r25, r1
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <DIO_voidSetPinDirection+0x70>
    19ee:	40 c0       	rjmp	.+128    	; 0x1a70 <DIO_voidSetPinDirection+0xf0>
    19f0:	c6 c0       	rjmp	.+396    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
						{
						case DIO_PORTA:CLR_BIT(DDRA,Copy_u8PIN);break;
    19f2:	aa e3       	ldi	r26, 0x3A	; 58
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ea e3       	ldi	r30, 0x3A	; 58
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_voidSetPinDirection+0x90>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_voidSetPinDirection+0x8c>
    1a14:	80 95       	com	r24
    1a16:	84 23       	and	r24, r20
    1a18:	8c 93       	st	X, r24
    1a1a:	b1 c0       	rjmp	.+354    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
						case DIO_PORTB:CLR_BIT(DDRB,Copy_u8PIN);break;
    1a1c:	a7 e3       	ldi	r26, 0x37	; 55
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e7 e3       	ldi	r30, 0x37	; 55
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	48 2f       	mov	r20, r24
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 2e       	mov	r0, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <DIO_voidSetPinDirection+0xba>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	0a 94       	dec	r0
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <DIO_voidSetPinDirection+0xb6>
    1a3e:	80 95       	com	r24
    1a40:	84 23       	and	r24, r20
    1a42:	8c 93       	st	X, r24
    1a44:	9c c0       	rjmp	.+312    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
						case DIO_PORTC:CLR_BIT(DDRC,Copy_u8PIN);break;
    1a46:	a4 e3       	ldi	r26, 0x34	; 52
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e4 e3       	ldi	r30, 0x34	; 52
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_voidSetPinDirection+0xe4>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_voidSetPinDirection+0xe0>
    1a68:	80 95       	com	r24
    1a6a:	84 23       	and	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	87 c0       	rjmp	.+270    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
						case DIO_PORTD:CLR_BIT(DDRD,Copy_u8PIN);break;
    1a70:	a1 e3       	ldi	r26, 0x31	; 49
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e1 e3       	ldi	r30, 0x31	; 49
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_voidSetPinDirection+0x10e>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_voidSetPinDirection+0x10a>
    1a92:	80 95       	com	r24
    1a94:	84 23       	and	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	72 c0       	rjmp	.+228    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>

						}

					}

					else if(PIN_DIR_OUTPUT==Copy_u8DIRECTION)
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <DIO_voidSetPinDirection+0x122>
    1aa0:	6e c0       	rjmp	.+220    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
					{
						switch(Copy_u8PORT)
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3d 83       	std	Y+5, r19	; 0x05
    1aaa:	2c 83       	std	Y+4, r18	; 0x04
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	49 f1       	breq	.+82     	; 0x1b08 <DIO_voidSetPinDirection+0x188>
    1ab6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aba:	22 30       	cpi	r18, 0x02	; 2
    1abc:	31 05       	cpc	r19, r1
    1abe:	2c f4       	brge	.+10     	; 0x1aca <DIO_voidSetPinDirection+0x14a>
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	61 f0       	breq	.+24     	; 0x1ae0 <DIO_voidSetPinDirection+0x160>
    1ac8:	5a c0       	rjmp	.+180    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
    1aca:	2c 81       	ldd	r18, Y+4	; 0x04
    1acc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ace:	22 30       	cpi	r18, 0x02	; 2
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	71 f1       	breq	.+92     	; 0x1b30 <DIO_voidSetPinDirection+0x1b0>
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	83 30       	cpi	r24, 0x03	; 3
    1ada:	91 05       	cpc	r25, r1
    1adc:	e9 f1       	breq	.+122    	; 0x1b58 <DIO_voidSetPinDirection+0x1d8>
    1ade:	4f c0       	rjmp	.+158    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
									{
									case DIO_PORTA:SET_BIT(DDRA,Copy_u8PIN);break;
    1ae0:	aa e3       	ldi	r26, 0x3A	; 58
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	ea e3       	ldi	r30, 0x3A	; 58
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	48 2f       	mov	r20, r24
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 2e       	mov	r0, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <DIO_voidSetPinDirection+0x17e>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	0a 94       	dec	r0
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <DIO_voidSetPinDirection+0x17a>
    1b02:	84 2b       	or	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	3b c0       	rjmp	.+118    	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
									case DIO_PORTB:SET_BIT(DDRB,Copy_u8PIN);break;
    1b08:	a7 e3       	ldi	r26, 0x37	; 55
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e7 e3       	ldi	r30, 0x37	; 55
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <DIO_voidSetPinDirection+0x1a6>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <DIO_voidSetPinDirection+0x1a2>
    1b2a:	84 2b       	or	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	27 c0       	rjmp	.+78     	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
									case DIO_PORTC:SET_BIT(DDRC,Copy_u8PIN);break;
    1b30:	a4 e3       	ldi	r26, 0x34	; 52
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e4 e3       	ldi	r30, 0x34	; 52
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <DIO_voidSetPinDirection+0x1ce>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <DIO_voidSetPinDirection+0x1ca>
    1b52:	84 2b       	or	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	13 c0       	rjmp	.+38     	; 0x1b7e <DIO_voidSetPinDirection+0x1fe>
									case DIO_PORTD:SET_BIT(DDRD,Copy_u8PIN);break;
    1b58:	a1 e3       	ldi	r26, 0x31	; 49
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e1 e3       	ldi	r30, 0x31	; 49
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	48 2f       	mov	r20, r24
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 2e       	mov	r0, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <DIO_voidSetPinDirection+0x1f6>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	0a 94       	dec	r0
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <DIO_voidSetPinDirection+0x1f2>
    1b7a:	84 2b       	or	r24, r20
    1b7c:	8c 93       	st	X, r24

				}



			}
    1b7e:	27 96       	adiw	r28, 0x07	; 7
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <DIO_voidSetPinValue>:




			void DIO_voidSetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8VALUE)
			{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	27 97       	sbiw	r28, 0x07	; 7
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	6a 83       	std	Y+2, r22	; 0x02
    1ba8:	4b 83       	std	Y+3, r20	; 0x03

			if(DIO_PORTD>=Copy_u8PORT&&DIO_PIN7>=Copy_u8PIN&&(255<=Copy_u8VALUE||PIN_VAL_HIGH==Copy_u8VALUE||PIN_VAL_LOW==Copy_u8VALUE))
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	84 30       	cpi	r24, 0x04	; 4
    1bae:	08 f0       	brcs	.+2      	; 0x1bb2 <DIO_voidSetPinValue+0x22>
    1bb0:	f8 c0       	rjmp	.+496    	; 0x1da2 <DIO_voidSetPinValue+0x212>
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	88 30       	cpi	r24, 0x08	; 8
    1bb6:	08 f0       	brcs	.+2      	; 0x1bba <DIO_voidSetPinValue+0x2a>
    1bb8:	f4 c0       	rjmp	.+488    	; 0x1da2 <DIO_voidSetPinValue+0x212>
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1bbe:	39 f0       	breq	.+14     	; 0x1bce <DIO_voidSetPinValue+0x3e>
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	21 f0       	breq	.+8      	; 0x1bce <DIO_voidSetPinValue+0x3e>
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	88 23       	and	r24, r24
    1bca:	09 f0       	breq	.+2      	; 0x1bce <DIO_voidSetPinValue+0x3e>
    1bcc:	ea c0       	rjmp	.+468    	; 0x1da2 <DIO_voidSetPinValue+0x212>
			{
				if(PIN_VAL_HIGH==Copy_u8VALUE)
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <DIO_voidSetPinValue+0x46>
    1bd4:	6f c0       	rjmp	.+222    	; 0x1cb4 <DIO_voidSetPinValue+0x124>
				{
					switch(Copy_u8PORT)
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	3f 83       	std	Y+7, r19	; 0x07
    1bde:	2e 83       	std	Y+6, r18	; 0x06
    1be0:	8e 81       	ldd	r24, Y+6	; 0x06
    1be2:	9f 81       	ldd	r25, Y+7	; 0x07
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	91 05       	cpc	r25, r1
    1be8:	49 f1       	breq	.+82     	; 0x1c3c <DIO_voidSetPinValue+0xac>
    1bea:	2e 81       	ldd	r18, Y+6	; 0x06
    1bec:	3f 81       	ldd	r19, Y+7	; 0x07
    1bee:	22 30       	cpi	r18, 0x02	; 2
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <DIO_voidSetPinValue+0x6e>
    1bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	61 f0       	breq	.+24     	; 0x1c14 <DIO_voidSetPinValue+0x84>
    1bfc:	d2 c0       	rjmp	.+420    	; 0x1da2 <DIO_voidSetPinValue+0x212>
    1bfe:	2e 81       	ldd	r18, Y+6	; 0x06
    1c00:	3f 81       	ldd	r19, Y+7	; 0x07
    1c02:	22 30       	cpi	r18, 0x02	; 2
    1c04:	31 05       	cpc	r19, r1
    1c06:	71 f1       	breq	.+92     	; 0x1c64 <DIO_voidSetPinValue+0xd4>
    1c08:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c0c:	83 30       	cpi	r24, 0x03	; 3
    1c0e:	91 05       	cpc	r25, r1
    1c10:	e9 f1       	breq	.+122    	; 0x1c8c <DIO_voidSetPinValue+0xfc>
    1c12:	c7 c0       	rjmp	.+398    	; 0x1da2 <DIO_voidSetPinValue+0x212>
											{
											case DIO_PORTA:SET_BIT(PORTA,Copy_u8PIN);break;
    1c14:	ab e3       	ldi	r26, 0x3B	; 59
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	eb e3       	ldi	r30, 0x3B	; 59
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_voidSetPinValue+0xa2>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_voidSetPinValue+0x9e>
    1c36:	84 2b       	or	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	b3 c0       	rjmp	.+358    	; 0x1da2 <DIO_voidSetPinValue+0x212>
											case DIO_PORTB:SET_BIT(PORTB,Copy_u8PIN);break;
    1c3c:	a8 e3       	ldi	r26, 0x38	; 56
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e8 e3       	ldi	r30, 0x38	; 56
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_voidSetPinValue+0xca>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_voidSetPinValue+0xc6>
    1c5e:	84 2b       	or	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	9f c0       	rjmp	.+318    	; 0x1da2 <DIO_voidSetPinValue+0x212>
											case DIO_PORTC:SET_BIT(PORTC,Copy_u8PIN);break;
    1c64:	a5 e3       	ldi	r26, 0x35	; 53
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e5 e3       	ldi	r30, 0x35	; 53
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <DIO_voidSetPinValue+0xf2>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <DIO_voidSetPinValue+0xee>
    1c86:	84 2b       	or	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	8b c0       	rjmp	.+278    	; 0x1da2 <DIO_voidSetPinValue+0x212>
											case DIO_PORTD:SET_BIT(PORTD,Copy_u8PIN);break;
    1c8c:	a2 e3       	ldi	r26, 0x32	; 50
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e2 e3       	ldi	r30, 0x32	; 50
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <DIO_voidSetPinValue+0x11a>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <DIO_voidSetPinValue+0x116>
    1cae:	84 2b       	or	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	77 c0       	rjmp	.+238    	; 0x1da2 <DIO_voidSetPinValue+0x212>
											}


				}

				else if(PIN_VAL_LOW==Copy_u8VALUE)
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	88 23       	and	r24, r24
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <DIO_voidSetPinValue+0x12c>
    1cba:	73 c0       	rjmp	.+230    	; 0x1da2 <DIO_voidSetPinValue+0x212>
				{
					switch(Copy_u8PORT)
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	3d 83       	std	Y+5, r19	; 0x05
    1cc4:	2c 83       	std	Y+4, r18	; 0x04
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	91 05       	cpc	r25, r1
    1cce:	59 f1       	breq	.+86     	; 0x1d26 <DIO_voidSetPinValue+0x196>
    1cd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd4:	22 30       	cpi	r18, 0x02	; 2
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <DIO_voidSetPinValue+0x154>
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f0       	breq	.+26     	; 0x1cfc <DIO_voidSetPinValue+0x16c>
    1ce2:	5f c0       	rjmp	.+190    	; 0x1da2 <DIO_voidSetPinValue+0x212>
    1ce4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	89 f1       	breq	.+98     	; 0x1d50 <DIO_voidSetPinValue+0x1c0>
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <DIO_voidSetPinValue+0x16a>
    1cf8:	40 c0       	rjmp	.+128    	; 0x1d7a <DIO_voidSetPinValue+0x1ea>
    1cfa:	53 c0       	rjmp	.+166    	; 0x1da2 <DIO_voidSetPinValue+0x212>
								{
								case DIO_PORTA:CLR_BIT(PORTA,Copy_u8PIN);break;
    1cfc:	ab e3       	ldi	r26, 0x3B	; 59
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	eb e3       	ldi	r30, 0x3B	; 59
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <DIO_voidSetPinValue+0x18a>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <DIO_voidSetPinValue+0x186>
    1d1e:	80 95       	com	r24
    1d20:	84 23       	and	r24, r20
    1d22:	8c 93       	st	X, r24
    1d24:	3e c0       	rjmp	.+124    	; 0x1da2 <DIO_voidSetPinValue+0x212>
								case DIO_PORTB:CLR_BIT(PORTB,Copy_u8PIN);break;
    1d26:	a8 e3       	ldi	r26, 0x38	; 56
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e8 e3       	ldi	r30, 0x38	; 56
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_voidSetPinValue+0x1b4>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <DIO_voidSetPinValue+0x1b0>
    1d48:	80 95       	com	r24
    1d4a:	84 23       	and	r24, r20
    1d4c:	8c 93       	st	X, r24
    1d4e:	29 c0       	rjmp	.+82     	; 0x1da2 <DIO_voidSetPinValue+0x212>
								case DIO_PORTC:CLR_BIT(PORTC,Copy_u8PIN);break;
    1d50:	a5 e3       	ldi	r26, 0x35	; 53
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e5 e3       	ldi	r30, 0x35	; 53
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	48 2f       	mov	r20, r24
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 2e       	mov	r0, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <DIO_voidSetPinValue+0x1de>
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	0a 94       	dec	r0
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <DIO_voidSetPinValue+0x1da>
    1d72:	80 95       	com	r24
    1d74:	84 23       	and	r24, r20
    1d76:	8c 93       	st	X, r24
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <DIO_voidSetPinValue+0x212>
								case DIO_PORTD:CLR_BIT(PORTD,Copy_u8PIN);break;
    1d7a:	a2 e3       	ldi	r26, 0x32	; 50
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e2 e3       	ldi	r30, 0x32	; 50
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	48 2f       	mov	r20, r24
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <DIO_voidSetPinValue+0x208>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <DIO_voidSetPinValue+0x204>
    1d9c:	80 95       	com	r24
    1d9e:	84 23       	and	r24, r20
    1da0:	8c 93       	st	X, r24
				}

				}


			}
    1da2:	27 96       	adiw	r28, 0x07	; 7
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <DIO_voidGetPinValue>:




			u8 DIO_voidGetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
			{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <DIO_voidGetPinValue+0x6>
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <DIO_voidGetPinValue+0x8>
    1dbc:	0f 92       	push	r0
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
    1dc4:	6b 83       	std	Y+3, r22	; 0x03
			  u8 LOC_u8RESULT=0;
    1dc6:	19 82       	std	Y+1, r1	; 0x01
			  if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	84 30       	cpi	r24, 0x04	; 4
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <DIO_voidGetPinValue+0x1c>
    1dce:	6b c0       	rjmp	.+214    	; 0x1ea6 <DIO_voidGetPinValue+0xf2>
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	88 30       	cpi	r24, 0x08	; 8
    1dd4:	08 f0       	brcs	.+2      	; 0x1dd8 <DIO_voidGetPinValue+0x24>
    1dd6:	67 c0       	rjmp	.+206    	; 0x1ea6 <DIO_voidGetPinValue+0xf2>
			  {


				  switch(Copy_u8PORT)
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	3d 83       	std	Y+5, r19	; 0x05
    1de0:	2c 83       	std	Y+4, r18	; 0x04
    1de2:	4c 81       	ldd	r20, Y+4	; 0x04
    1de4:	5d 81       	ldd	r21, Y+5	; 0x05
    1de6:	41 30       	cpi	r20, 0x01	; 1
    1de8:	51 05       	cpc	r21, r1
    1dea:	41 f1       	breq	.+80     	; 0x1e3c <DIO_voidGetPinValue+0x88>
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	9d 81       	ldd	r25, Y+5	; 0x05
    1df0:	82 30       	cpi	r24, 0x02	; 2
    1df2:	91 05       	cpc	r25, r1
    1df4:	34 f4       	brge	.+12     	; 0x1e02 <DIO_voidGetPinValue+0x4e>
    1df6:	2c 81       	ldd	r18, Y+4	; 0x04
    1df8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfa:	21 15       	cp	r18, r1
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	61 f0       	breq	.+24     	; 0x1e18 <DIO_voidGetPinValue+0x64>
    1e00:	52 c0       	rjmp	.+164    	; 0x1ea6 <DIO_voidGetPinValue+0xf2>
    1e02:	4c 81       	ldd	r20, Y+4	; 0x04
    1e04:	5d 81       	ldd	r21, Y+5	; 0x05
    1e06:	42 30       	cpi	r20, 0x02	; 2
    1e08:	51 05       	cpc	r21, r1
    1e0a:	51 f1       	breq	.+84     	; 0x1e60 <DIO_voidGetPinValue+0xac>
    1e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e10:	83 30       	cpi	r24, 0x03	; 3
    1e12:	91 05       	cpc	r25, r1
    1e14:	b9 f1       	breq	.+110    	; 0x1e84 <DIO_voidGetPinValue+0xd0>
    1e16:	47 c0       	rjmp	.+142    	; 0x1ea6 <DIO_voidGetPinValue+0xf2>

				  {
					case DIO_PORTA:LOC_u8RESULT=GET_BIT(PINA,Copy_u8PIN);break;
    1e18:	e9 e3       	ldi	r30, 0x39	; 57
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a9 01       	movw	r20, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <DIO_voidGetPinValue+0x7c>
    1e2c:	55 95       	asr	r21
    1e2e:	47 95       	ror	r20
    1e30:	8a 95       	dec	r24
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <DIO_voidGetPinValue+0x78>
    1e34:	ca 01       	movw	r24, r20
    1e36:	81 70       	andi	r24, 0x01	; 1
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	35 c0       	rjmp	.+106    	; 0x1ea6 <DIO_voidGetPinValue+0xf2>
					case DIO_PORTB:LOC_u8RESULT=GET_BIT(PINB,Copy_u8PIN);break;
    1e3c:	e6 e3       	ldi	r30, 0x36	; 54
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a9 01       	movw	r20, r18
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <DIO_voidGetPinValue+0xa0>
    1e50:	55 95       	asr	r21
    1e52:	47 95       	ror	r20
    1e54:	8a 95       	dec	r24
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <DIO_voidGetPinValue+0x9c>
    1e58:	ca 01       	movw	r24, r20
    1e5a:	81 70       	andi	r24, 0x01	; 1
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	23 c0       	rjmp	.+70     	; 0x1ea6 <DIO_voidGetPinValue+0xf2>
					case DIO_PORTC:LOC_u8RESULT=GET_BIT(PINC,Copy_u8PIN);break;
    1e60:	e3 e3       	ldi	r30, 0x33	; 51
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	88 2f       	mov	r24, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a9 01       	movw	r20, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <DIO_voidGetPinValue+0xc4>
    1e74:	55 95       	asr	r21
    1e76:	47 95       	ror	r20
    1e78:	8a 95       	dec	r24
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <DIO_voidGetPinValue+0xc0>
    1e7c:	ca 01       	movw	r24, r20
    1e7e:	81 70       	andi	r24, 0x01	; 1
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	11 c0       	rjmp	.+34     	; 0x1ea6 <DIO_voidGetPinValue+0xf2>
					case DIO_PORTD:LOC_u8RESULT=GET_BIT(PIND,Copy_u8PIN);break;
    1e84:	e0 e3       	ldi	r30, 0x30	; 48
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a9 01       	movw	r20, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <DIO_voidGetPinValue+0xe8>
    1e98:	55 95       	asr	r21
    1e9a:	47 95       	ror	r20
    1e9c:	8a 95       	dec	r24
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <DIO_voidGetPinValue+0xe4>
    1ea0:	ca 01       	movw	r24, r20
    1ea2:	81 70       	andi	r24, 0x01	; 1
    1ea4:	89 83       	std	Y+1, r24	; 0x01

				  }


				}
			  return LOC_u8RESULT;
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01


			}
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <DIO_voidTogglePinValue>:



			void DIO_voidTogglePinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
			{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <DIO_voidTogglePinValue+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <DIO_voidTogglePinValue+0x8>
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	6a 83       	std	Y+2, r22	; 0x02
				if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	84 30       	cpi	r24, 0x04	; 4
    1ecc:	08 f0       	brcs	.+2      	; 0x1ed0 <DIO_voidTogglePinValue+0x18>
    1ece:	72 c0       	rjmp	.+228    	; 0x1fb4 <DIO_voidTogglePinValue+0xfc>
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	88 30       	cpi	r24, 0x08	; 8
    1ed4:	08 f0       	brcs	.+2      	; 0x1ed8 <DIO_voidTogglePinValue+0x20>
    1ed6:	6e c0       	rjmp	.+220    	; 0x1fb4 <DIO_voidTogglePinValue+0xfc>
				  {
					switch(Copy_u8PORT)
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	3c 83       	std	Y+4, r19	; 0x04
    1ee0:	2b 83       	std	Y+3, r18	; 0x03
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	81 30       	cpi	r24, 0x01	; 1
    1ee8:	91 05       	cpc	r25, r1
    1eea:	49 f1       	breq	.+82     	; 0x1f3e <DIO_voidTogglePinValue+0x86>
    1eec:	2b 81       	ldd	r18, Y+3	; 0x03
    1eee:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef0:	22 30       	cpi	r18, 0x02	; 2
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <DIO_voidTogglePinValue+0x48>
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	61 f0       	breq	.+24     	; 0x1f16 <DIO_voidTogglePinValue+0x5e>
    1efe:	5a c0       	rjmp	.+180    	; 0x1fb4 <DIO_voidTogglePinValue+0xfc>
    1f00:	2b 81       	ldd	r18, Y+3	; 0x03
    1f02:	3c 81       	ldd	r19, Y+4	; 0x04
    1f04:	22 30       	cpi	r18, 0x02	; 2
    1f06:	31 05       	cpc	r19, r1
    1f08:	71 f1       	breq	.+92     	; 0x1f66 <DIO_voidTogglePinValue+0xae>
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	83 30       	cpi	r24, 0x03	; 3
    1f10:	91 05       	cpc	r25, r1
    1f12:	e9 f1       	breq	.+122    	; 0x1f8e <DIO_voidTogglePinValue+0xd6>
    1f14:	4f c0       	rjmp	.+158    	; 0x1fb4 <DIO_voidTogglePinValue+0xfc>
							{
							case DIO_PORTA:TOG_BIT(PORTA, Copy_u8PIN) ;break;
    1f16:	ab e3       	ldi	r26, 0x3B	; 59
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	eb e3       	ldi	r30, 0x3B	; 59
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2f       	mov	r20, r24
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 2e       	mov	r0, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <DIO_voidTogglePinValue+0x7c>
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	0a 94       	dec	r0
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <DIO_voidTogglePinValue+0x78>
    1f38:	84 27       	eor	r24, r20
    1f3a:	8c 93       	st	X, r24
    1f3c:	3b c0       	rjmp	.+118    	; 0x1fb4 <DIO_voidTogglePinValue+0xfc>
							case DIO_PORTB:TOG_BIT(PORTB, Copy_u8PIN) ;break;
    1f3e:	a8 e3       	ldi	r26, 0x38	; 56
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e8 e3       	ldi	r30, 0x38	; 56
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	48 2f       	mov	r20, r24
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	02 2e       	mov	r0, r18
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <DIO_voidTogglePinValue+0xa4>
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	0a 94       	dec	r0
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <DIO_voidTogglePinValue+0xa0>
    1f60:	84 27       	eor	r24, r20
    1f62:	8c 93       	st	X, r24
    1f64:	27 c0       	rjmp	.+78     	; 0x1fb4 <DIO_voidTogglePinValue+0xfc>
							case DIO_PORTC:TOG_BIT(PORTC, Copy_u8PIN) ;break;
    1f66:	a5 e3       	ldi	r26, 0x35	; 53
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e5 e3       	ldi	r30, 0x35	; 53
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	48 2f       	mov	r20, r24
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	02 2e       	mov	r0, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_voidTogglePinValue+0xcc>
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	0a 94       	dec	r0
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <DIO_voidTogglePinValue+0xc8>
    1f88:	84 27       	eor	r24, r20
    1f8a:	8c 93       	st	X, r24
    1f8c:	13 c0       	rjmp	.+38     	; 0x1fb4 <DIO_voidTogglePinValue+0xfc>
							case DIO_PORTD:TOG_BIT(PORTD, Copy_u8PIN) ;break;
    1f8e:	a2 e3       	ldi	r26, 0x32	; 50
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e2 e3       	ldi	r30, 0x32	; 50
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	48 2f       	mov	r20, r24
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	02 2e       	mov	r0, r18
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <DIO_voidTogglePinValue+0xf4>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	0a 94       	dec	r0
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <DIO_voidTogglePinValue+0xf0>
    1fb0:	84 27       	eor	r24, r20
    1fb2:	8c 93       	st	X, r24





			}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <DIO_voidClearPinValue>:



			void DIO_voidClearPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
			{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <DIO_voidClearPinValue+0x6>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <DIO_voidClearPinValue+0x8>
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	6a 83       	std	Y+2, r22	; 0x02

				 if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	84 30       	cpi	r24, 0x04	; 4
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <DIO_voidClearPinValue+0x18>
    1fd8:	77 c0       	rjmp	.+238    	; 0x20c8 <DIO_voidClearPinValue+0x106>
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	88 30       	cpi	r24, 0x08	; 8
    1fde:	08 f0       	brcs	.+2      	; 0x1fe2 <DIO_voidClearPinValue+0x20>
    1fe0:	73 c0       	rjmp	.+230    	; 0x20c8 <DIO_voidClearPinValue+0x106>
					  {

					 switch(Copy_u8PORT)
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	3c 83       	std	Y+4, r19	; 0x04
    1fea:	2b 83       	std	Y+3, r18	; 0x03
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	59 f1       	breq	.+86     	; 0x204c <DIO_voidClearPinValue+0x8a>
    1ff6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff8:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffa:	22 30       	cpi	r18, 0x02	; 2
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	2c f4       	brge	.+10     	; 0x200a <DIO_voidClearPinValue+0x48>
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f0       	breq	.+26     	; 0x2022 <DIO_voidClearPinValue+0x60>
    2008:	5f c0       	rjmp	.+190    	; 0x20c8 <DIO_voidClearPinValue+0x106>
    200a:	2b 81       	ldd	r18, Y+3	; 0x03
    200c:	3c 81       	ldd	r19, Y+4	; 0x04
    200e:	22 30       	cpi	r18, 0x02	; 2
    2010:	31 05       	cpc	r19, r1
    2012:	89 f1       	breq	.+98     	; 0x2076 <DIO_voidClearPinValue+0xb4>
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	83 30       	cpi	r24, 0x03	; 3
    201a:	91 05       	cpc	r25, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <DIO_voidClearPinValue+0x5e>
    201e:	40 c0       	rjmp	.+128    	; 0x20a0 <DIO_voidClearPinValue+0xde>
    2020:	53 c0       	rjmp	.+166    	; 0x20c8 <DIO_voidClearPinValue+0x106>
					{
						case DIO_PORTA:CLR_BIT(PORTA,Copy_u8PIN);break;
    2022:	ab e3       	ldi	r26, 0x3B	; 59
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	eb e3       	ldi	r30, 0x3B	; 59
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	48 2f       	mov	r20, r24
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	02 2e       	mov	r0, r18
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <DIO_voidClearPinValue+0x7e>
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	0a 94       	dec	r0
    2042:	e2 f7       	brpl	.-8      	; 0x203c <DIO_voidClearPinValue+0x7a>
    2044:	80 95       	com	r24
    2046:	84 23       	and	r24, r20
    2048:	8c 93       	st	X, r24
    204a:	3e c0       	rjmp	.+124    	; 0x20c8 <DIO_voidClearPinValue+0x106>
						case DIO_PORTB:CLR_BIT(PORTB,Copy_u8PIN);break;
    204c:	a8 e3       	ldi	r26, 0x38	; 56
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e8 e3       	ldi	r30, 0x38	; 56
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	48 2f       	mov	r20, r24
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	02 2e       	mov	r0, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <DIO_voidClearPinValue+0xa8>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	0a 94       	dec	r0
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <DIO_voidClearPinValue+0xa4>
    206e:	80 95       	com	r24
    2070:	84 23       	and	r24, r20
    2072:	8c 93       	st	X, r24
    2074:	29 c0       	rjmp	.+82     	; 0x20c8 <DIO_voidClearPinValue+0x106>
						case DIO_PORTC:CLR_BIT(PORTC,Copy_u8PIN);break;
    2076:	a5 e3       	ldi	r26, 0x35	; 53
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e5 e3       	ldi	r30, 0x35	; 53
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	48 2f       	mov	r20, r24
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	02 2e       	mov	r0, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <DIO_voidClearPinValue+0xd2>
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	0a 94       	dec	r0
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <DIO_voidClearPinValue+0xce>
    2098:	80 95       	com	r24
    209a:	84 23       	and	r24, r20
    209c:	8c 93       	st	X, r24
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <DIO_voidClearPinValue+0x106>
						case DIO_PORTD:CLR_BIT(PORTD,Copy_u8PIN);break;
    20a0:	a2 e3       	ldi	r26, 0x32	; 50
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e2 e3       	ldi	r30, 0x32	; 50
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	48 2f       	mov	r20, r24
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 2e       	mov	r0, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <DIO_voidClearPinValue+0xfc>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	0a 94       	dec	r0
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <DIO_voidClearPinValue+0xf8>
    20c2:	80 95       	com	r24
    20c4:	84 23       	and	r24, r20
    20c6:	8c 93       	st	X, r24


					  }


			}
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <DIO_voidConnectPullUp>:




			void DIO_voidConnectPullUp(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8ConnectPullUp)
			{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <DIO_voidConnectPullUp+0x6>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <DIO_voidConnectPullUp+0x8>
    20de:	0f 92       	push	r0
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	6a 83       	std	Y+2, r22	; 0x02
    20e8:	4b 83       	std	Y+3, r20	; 0x03
				if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	84 30       	cpi	r24, 0x04	; 4
    20ee:	08 f0       	brcs	.+2      	; 0x20f2 <DIO_voidConnectPullUp+0x1c>
    20f0:	3d c1       	rjmp	.+634    	; 0x236c <DIO_voidConnectPullUp+0x296>
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	88 30       	cpi	r24, 0x08	; 8
    20f6:	08 f0       	brcs	.+2      	; 0x20fa <DIO_voidConnectPullUp+0x24>
    20f8:	39 c1       	rjmp	.+626    	; 0x236c <DIO_voidConnectPullUp+0x296>
				{
					switch(Copy_u8PORT)
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	3d 83       	std	Y+5, r19	; 0x05
    2102:	2c 83       	std	Y+4, r18	; 0x04
    2104:	8c 81       	ldd	r24, Y+4	; 0x04
    2106:	9d 81       	ldd	r25, Y+5	; 0x05
    2108:	81 30       	cpi	r24, 0x01	; 1
    210a:	91 05       	cpc	r25, r1
    210c:	09 f4       	brne	.+2      	; 0x2110 <DIO_voidConnectPullUp+0x3a>
    210e:	5d c0       	rjmp	.+186    	; 0x21ca <DIO_voidConnectPullUp+0xf4>
    2110:	2c 81       	ldd	r18, Y+4	; 0x04
    2112:	3d 81       	ldd	r19, Y+5	; 0x05
    2114:	22 30       	cpi	r18, 0x02	; 2
    2116:	31 05       	cpc	r19, r1
    2118:	2c f4       	brge	.+10     	; 0x2124 <DIO_voidConnectPullUp+0x4e>
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	9d 81       	ldd	r25, Y+5	; 0x05
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	71 f0       	breq	.+28     	; 0x213e <DIO_voidConnectPullUp+0x68>
    2122:	24 c1       	rjmp	.+584    	; 0x236c <DIO_voidConnectPullUp+0x296>
    2124:	2c 81       	ldd	r18, Y+4	; 0x04
    2126:	3d 81       	ldd	r19, Y+5	; 0x05
    2128:	22 30       	cpi	r18, 0x02	; 2
    212a:	31 05       	cpc	r19, r1
    212c:	09 f4       	brne	.+2      	; 0x2130 <DIO_voidConnectPullUp+0x5a>
    212e:	93 c0       	rjmp	.+294    	; 0x2256 <DIO_voidConnectPullUp+0x180>
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	9d 81       	ldd	r25, Y+5	; 0x05
    2134:	83 30       	cpi	r24, 0x03	; 3
    2136:	91 05       	cpc	r25, r1
    2138:	09 f4       	brne	.+2      	; 0x213c <DIO_voidConnectPullUp+0x66>
    213a:	d3 c0       	rjmp	.+422    	; 0x22e2 <DIO_voidConnectPullUp+0x20c>
    213c:	17 c1       	rjmp	.+558    	; 0x236c <DIO_voidConnectPullUp+0x296>
					{
					case DIO_PORTA:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	71 f5       	brne	.+92     	; 0x21a0 <DIO_voidConnectPullUp+0xca>
						{
							SET_BIT(PORTA,Copy_u8PIN);
    2144:	ab e3       	ldi	r26, 0x3B	; 59
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	eb e3       	ldi	r30, 0x3B	; 59
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	48 2f       	mov	r20, r24
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <DIO_voidConnectPullUp+0x8a>
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	2a 95       	dec	r18
    2162:	e2 f7       	brpl	.-8      	; 0x215c <DIO_voidConnectPullUp+0x86>
    2164:	84 2b       	or	r24, r20
    2166:	8c 93       	st	X, r24
							CLR_BIT(DDRA,Copy_u8PIN);
    2168:	aa e3       	ldi	r26, 0x3A	; 58
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	ea e3       	ldi	r30, 0x3A	; 58
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	48 2f       	mov	r20, r24
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 2e       	mov	r0, r18
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <DIO_voidConnectPullUp+0xb0>
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	0a 94       	dec	r0
    2188:	e2 f7       	brpl	.-8      	; 0x2182 <DIO_voidConnectPullUp+0xac>
    218a:	80 95       	com	r24
    218c:	84 23       	and	r24, r20
    218e:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    2190:	a0 e5       	ldi	r26, 0x50	; 80
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e0 e5       	ldi	r30, 0x50	; 80
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	8b 7f       	andi	r24, 0xFB	; 251
    219c:	8c 93       	st	X, r24
    219e:	e6 c0       	rjmp	.+460    	; 0x236c <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTA,Copy_u8PIN);
    21a0:	ab e3       	ldi	r26, 0x3B	; 59
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	eb e3       	ldi	r30, 0x3B	; 59
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	48 2f       	mov	r20, r24
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	02 2e       	mov	r0, r18
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <DIO_voidConnectPullUp+0xe8>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	0a 94       	dec	r0
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <DIO_voidConnectPullUp+0xe4>
    21c2:	80 95       	com	r24
    21c4:	84 23       	and	r24, r20
    21c6:	8c 93       	st	X, r24
    21c8:	d1 c0       	rjmp	.+418    	; 0x236c <DIO_voidConnectPullUp+0x296>
						break;



		             case DIO_PORTB:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	71 f5       	brne	.+92     	; 0x222c <DIO_voidConnectPullUp+0x156>
						{
							SET_BIT(PORTB,Copy_u8PIN);
    21d0:	a8 e3       	ldi	r26, 0x38	; 56
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e8 e3       	ldi	r30, 0x38	; 56
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	48 2f       	mov	r20, r24
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <DIO_voidConnectPullUp+0x116>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	2a 95       	dec	r18
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <DIO_voidConnectPullUp+0x112>
    21f0:	84 2b       	or	r24, r20
    21f2:	8c 93       	st	X, r24
							CLR_BIT(DDRB,Copy_u8PIN);
    21f4:	a7 e3       	ldi	r26, 0x37	; 55
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e7 e3       	ldi	r30, 0x37	; 55
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	48 2f       	mov	r20, r24
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	02 2e       	mov	r0, r18
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <DIO_voidConnectPullUp+0x13c>
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	0a 94       	dec	r0
    2214:	e2 f7       	brpl	.-8      	; 0x220e <DIO_voidConnectPullUp+0x138>
    2216:	80 95       	com	r24
    2218:	84 23       	and	r24, r20
    221a:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    221c:	a0 e5       	ldi	r26, 0x50	; 80
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e0 e5       	ldi	r30, 0x50	; 80
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8b 7f       	andi	r24, 0xFB	; 251
    2228:	8c 93       	st	X, r24
    222a:	a0 c0       	rjmp	.+320    	; 0x236c <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTB,Copy_u8PIN);
    222c:	a8 e3       	ldi	r26, 0x38	; 56
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e8 e3       	ldi	r30, 0x38	; 56
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <DIO_voidConnectPullUp+0x174>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <DIO_voidConnectPullUp+0x170>
    224e:	80 95       	com	r24
    2250:	84 23       	and	r24, r20
    2252:	8c 93       	st	X, r24
    2254:	8b c0       	rjmp	.+278    	; 0x236c <DIO_voidConnectPullUp+0x296>

						}
						break;

		             case DIO_PORTC:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	71 f5       	brne	.+92     	; 0x22b8 <DIO_voidConnectPullUp+0x1e2>
						{
							SET_BIT(PORTC,Copy_u8PIN);
    225c:	a5 e3       	ldi	r26, 0x35	; 53
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e5 e3       	ldi	r30, 0x35	; 53
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	48 2f       	mov	r20, r24
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DIO_voidConnectPullUp+0x1a2>
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	2a 95       	dec	r18
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <DIO_voidConnectPullUp+0x19e>
    227c:	84 2b       	or	r24, r20
    227e:	8c 93       	st	X, r24
							CLR_BIT(DDRC,Copy_u8PIN);
    2280:	a4 e3       	ldi	r26, 0x34	; 52
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e4 e3       	ldi	r30, 0x34	; 52
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	48 2f       	mov	r20, r24
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	02 2e       	mov	r0, r18
    2298:	02 c0       	rjmp	.+4      	; 0x229e <DIO_voidConnectPullUp+0x1c8>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	0a 94       	dec	r0
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <DIO_voidConnectPullUp+0x1c4>
    22a2:	80 95       	com	r24
    22a4:	84 23       	and	r24, r20
    22a6:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    22a8:	a0 e5       	ldi	r26, 0x50	; 80
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e0 e5       	ldi	r30, 0x50	; 80
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	8b 7f       	andi	r24, 0xFB	; 251
    22b4:	8c 93       	st	X, r24
    22b6:	5a c0       	rjmp	.+180    	; 0x236c <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTC,Copy_u8PIN);
    22b8:	a5 e3       	ldi	r26, 0x35	; 53
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e5 e3       	ldi	r30, 0x35	; 53
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	48 2f       	mov	r20, r24
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	02 2e       	mov	r0, r18
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <DIO_voidConnectPullUp+0x200>
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	0a 94       	dec	r0
    22d8:	e2 f7       	brpl	.-8      	; 0x22d2 <DIO_voidConnectPullUp+0x1fc>
    22da:	80 95       	com	r24
    22dc:	84 23       	and	r24, r20
    22de:	8c 93       	st	X, r24
    22e0:	45 c0       	rjmp	.+138    	; 0x236c <DIO_voidConnectPullUp+0x296>

						}
						break;

		             case DIO_PORTD:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	71 f5       	brne	.+92     	; 0x2344 <DIO_voidConnectPullUp+0x26e>
						{
							SET_BIT(PORTD,Copy_u8PIN);
    22e8:	a2 e3       	ldi	r26, 0x32	; 50
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e2 e3       	ldi	r30, 0x32	; 50
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	48 2f       	mov	r20, r24
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <DIO_voidConnectPullUp+0x22e>
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	2a 95       	dec	r18
    2306:	e2 f7       	brpl	.-8      	; 0x2300 <DIO_voidConnectPullUp+0x22a>
    2308:	84 2b       	or	r24, r20
    230a:	8c 93       	st	X, r24
							CLR_BIT(DDRD,Copy_u8PIN);
    230c:	a1 e3       	ldi	r26, 0x31	; 49
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e1 e3       	ldi	r30, 0x31	; 49
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	48 2f       	mov	r20, r24
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	02 2e       	mov	r0, r18
    2324:	02 c0       	rjmp	.+4      	; 0x232a <DIO_voidConnectPullUp+0x254>
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	0a 94       	dec	r0
    232c:	e2 f7       	brpl	.-8      	; 0x2326 <DIO_voidConnectPullUp+0x250>
    232e:	80 95       	com	r24
    2330:	84 23       	and	r24, r20
    2332:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    2334:	a0 e5       	ldi	r26, 0x50	; 80
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e0 e5       	ldi	r30, 0x50	; 80
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	8b 7f       	andi	r24, 0xFB	; 251
    2340:	8c 93       	st	X, r24
    2342:	14 c0       	rjmp	.+40     	; 0x236c <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTD,Copy_u8PIN);
    2344:	a2 e3       	ldi	r26, 0x32	; 50
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e2 e3       	ldi	r30, 0x32	; 50
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	48 2f       	mov	r20, r24
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 2e       	mov	r0, r18
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <DIO_voidConnectPullUp+0x28c>
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	0a 94       	dec	r0
    2364:	e2 f7       	brpl	.-8      	; 0x235e <DIO_voidConnectPullUp+0x288>
    2366:	80 95       	com	r24
    2368:	84 23       	and	r24, r20
    236a:	8c 93       	st	X, r24

				}



			}
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <KPD_voidInit>:
#include"KPD_config.h"
#include"KPD_interface.h"
#include"KPD_private.h"

void KPD_voidInit(void)
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
	//THE ROWS IN INPUT PULL UP (HIGH PINS)
	DIO_voidConnectPullUp(KPD_PORT,KPD_R0,PIN_VAL_HIGH);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	64 e0       	ldi	r22, 0x04	; 4
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <DIO_voidConnectPullUp>
	DIO_voidConnectPullUp(KPD_PORT,KPD_R1,PIN_VAL_HIGH);
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	65 e0       	ldi	r22, 0x05	; 5
    2392:	41 e0       	ldi	r20, 0x01	; 1
    2394:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <DIO_voidConnectPullUp>
	DIO_voidConnectPullUp(KPD_PORT,KPD_R2,PIN_VAL_HIGH);
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	66 e0       	ldi	r22, 0x06	; 6
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <DIO_voidConnectPullUp>
	DIO_voidConnectPullUp(KPD_PORT,KPD_R3,PIN_VAL_HIGH);
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	67 e0       	ldi	r22, 0x07	; 7
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <DIO_voidConnectPullUp>

	/* THE COLS IS OUTPUT AND HAVE HIGH VALUE*/
	DIO_voidSetPinDirection(KPD_PORT,KPD_C0,PIN_DIR_OUTPUT);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,KPD_C1,PIN_DIR_OUTPUT);
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	61 e0       	ldi	r22, 0x01	; 1
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,KPD_C2,PIN_DIR_OUTPUT);
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	62 e0       	ldi	r22, 0x02	; 2
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT,KPD_C3,PIN_DIR_OUTPUT);
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	63 e0       	ldi	r22, 0x03	; 3
    23ce:	41 e0       	ldi	r20, 0x01	; 1
    23d0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_PORT,KPD_C0,PIN_VAL_HIGH);
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,KPD_C1,PIN_VAL_HIGH);
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	61 e0       	ldi	r22, 0x01	; 1
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,KPD_C2,PIN_VAL_HIGH);
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	62 e0       	ldi	r22, 0x02	; 2
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT,KPD_C3,PIN_VAL_HIGH);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	63 e0       	ldi	r22, 0x03	; 3
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>




}
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <KPD_u8GetPressed>:


u8 KPD_u8GetPressed(void)
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	a7 97       	sbiw	r28, 0x27	; 39
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Col;
	u8 Local_u8Row;
	u8 Local_u8Reading;
	u8 Local_u8Key=0;
    2416:	1f 86       	std	Y+15, r1	; 0x0f

	u8 KPD_u8Values [MAX_ROW][MAX_COL] = KPD_VALUES;
    2418:	ce 01       	movw	r24, r28
    241a:	43 96       	adiw	r24, 0x13	; 19
    241c:	9c a3       	std	Y+36, r25	; 0x24
    241e:	8b a3       	std	Y+35, r24	; 0x23
    2420:	e4 ed       	ldi	r30, 0xD4	; 212
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	fe a3       	std	Y+38, r31	; 0x26
    2426:	ed a3       	std	Y+37, r30	; 0x25
    2428:	f0 e1       	ldi	r31, 0x10	; 16
    242a:	ff a3       	std	Y+39, r31	; 0x27
    242c:	ed a1       	ldd	r30, Y+37	; 0x25
    242e:	fe a1       	ldd	r31, Y+38	; 0x26
    2430:	00 80       	ld	r0, Z
    2432:	8d a1       	ldd	r24, Y+37	; 0x25
    2434:	9e a1       	ldd	r25, Y+38	; 0x26
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	9e a3       	std	Y+38, r25	; 0x26
    243a:	8d a3       	std	Y+37, r24	; 0x25
    243c:	eb a1       	ldd	r30, Y+35	; 0x23
    243e:	fc a1       	ldd	r31, Y+36	; 0x24
    2440:	00 82       	st	Z, r0
    2442:	8b a1       	ldd	r24, Y+35	; 0x23
    2444:	9c a1       	ldd	r25, Y+36	; 0x24
    2446:	01 96       	adiw	r24, 0x01	; 1
    2448:	9c a3       	std	Y+36, r25	; 0x24
    244a:	8b a3       	std	Y+35, r24	; 0x23
    244c:	9f a1       	ldd	r25, Y+39	; 0x27
    244e:	91 50       	subi	r25, 0x01	; 1
    2450:	9f a3       	std	Y+39, r25	; 0x27
    2452:	ef a1       	ldd	r30, Y+39	; 0x27
    2454:	ee 23       	and	r30, r30
    2456:	51 f7       	brne	.-44     	; 0x242c <KPD_u8GetPressed+0x2a>

	for (Local_u8Col =0 ; Local_u8Col <4 ; Local_u8Col++)
    2458:	1a 8a       	std	Y+18, r1	; 0x12
    245a:	b1 c0       	rjmp	.+354    	; 0x25be <KPD_u8GetPressed+0x1bc>
	{
		DIO_voidSetPinValue(KPD_PORT,Local_u8Col,PIN_VAL_LOW); // Put GND in each Column
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	6a 89       	ldd	r22, Y+18	; 0x12
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>

		for (Local_u8Row = 0 ; Local_u8Row <4 ; Local_u8Row++)
    2466:	19 8a       	std	Y+17, r1	; 0x11
    2468:	9e c0       	rjmp	.+316    	; 0x25a6 <KPD_u8GetPressed+0x1a4>
		{
			Local_u8Reading = DIO_voidGetPinValue(KPD_PORT,Local_u8Row + 4);
    246a:	89 89       	ldd	r24, Y+17	; 0x11
    246c:	98 2f       	mov	r25, r24
    246e:	9c 5f       	subi	r25, 0xFC	; 252
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	69 2f       	mov	r22, r25
    2474:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_voidGetPinValue>
    2478:	88 8b       	std	Y+16, r24	; 0x10
			// to get the values of each switch

			if (Local_u8Reading == PIN_VAL_LOW)
    247a:	88 89       	ldd	r24, Y+16	; 0x10
    247c:	88 23       	and	r24, r24
    247e:	09 f0       	breq	.+2      	; 0x2482 <KPD_u8GetPressed+0x80>
    2480:	86 c0       	rjmp	.+268    	; 0x258e <KPD_u8GetPressed+0x18c>
			{
				Local_u8Key = KPD_u8Values [Local_u8Row][Local_u8Col];
    2482:	89 89       	ldd	r24, Y+17	; 0x11
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	8a 89       	ldd	r24, Y+18	; 0x12
    248a:	48 2f       	mov	r20, r24
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	22 0f       	add	r18, r18
    2490:	33 1f       	adc	r19, r19
    2492:	22 0f       	add	r18, r18
    2494:	33 1f       	adc	r19, r19
    2496:	ce 01       	movw	r24, r28
    2498:	01 96       	adiw	r24, 0x01	; 1
    249a:	82 0f       	add	r24, r18
    249c:	93 1f       	adc	r25, r19
    249e:	84 0f       	add	r24, r20
    24a0:	95 1f       	adc	r25, r21
    24a2:	fc 01       	movw	r30, r24
    24a4:	72 96       	adiw	r30, 0x12	; 18
    24a6:	80 81       	ld	r24, Z
    24a8:	8f 87       	std	Y+15, r24	; 0x0f
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a0 e2       	ldi	r26, 0x20	; 32
    24b0:	b1 e4       	ldi	r27, 0x41	; 65
    24b2:	8b 87       	std	Y+11, r24	; 0x0b
    24b4:	9c 87       	std	Y+12, r25	; 0x0c
    24b6:	ad 87       	std	Y+13, r26	; 0x0d
    24b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    24bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24be:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a ef       	ldi	r20, 0xFA	; 250
    24c8:	54 e4       	ldi	r21, 0x44	; 68
    24ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	8f 83       	std	Y+7, r24	; 0x07
    24d4:	98 87       	std	Y+8, r25	; 0x08
    24d6:	a9 87       	std	Y+9, r26	; 0x09
    24d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24da:	6f 81       	ldd	r22, Y+7	; 0x07
    24dc:	78 85       	ldd	r23, Y+8	; 0x08
    24de:	89 85       	ldd	r24, Y+9	; 0x09
    24e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	2c f4       	brge	.+10     	; 0x24fc <KPD_u8GetPressed+0xfa>
		__ticks = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	3f c0       	rjmp	.+126    	; 0x257a <KPD_u8GetPressed+0x178>
	else if (__tmp > 65535)
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	57 e4       	ldi	r21, 0x47	; 71
    250c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	4c f5       	brge	.+82     	; 0x2566 <KPD_u8GetPressed+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	6b 85       	ldd	r22, Y+11	; 0x0b
    2516:	7c 85       	ldd	r23, Y+12	; 0x0c
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	9e 85       	ldd	r25, Y+14	; 0x0e
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9e 83       	std	Y+6, r25	; 0x06
    253a:	8d 83       	std	Y+5, r24	; 0x05
    253c:	0f c0       	rjmp	.+30     	; 0x255c <KPD_u8GetPressed+0x15a>
    253e:	88 ec       	ldi	r24, 0xC8	; 200
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9c 83       	std	Y+4, r25	; 0x04
    2544:	8b 83       	std	Y+3, r24	; 0x03
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <KPD_u8GetPressed+0x148>
    254e:	9c 83       	std	Y+4, r25	; 0x04
    2550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	9e 81       	ldd	r25, Y+6	; 0x06
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	69 f7       	brne	.-38     	; 0x253e <KPD_u8GetPressed+0x13c>
    2564:	14 c0       	rjmp	.+40     	; 0x258e <KPD_u8GetPressed+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	6f 81       	ldd	r22, Y+7	; 0x07
    2568:	78 85       	ldd	r23, Y+8	; 0x08
    256a:	89 85       	ldd	r24, Y+9	; 0x09
    256c:	9a 85       	ldd	r25, Y+10	; 0x0a
    256e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <KPD_u8GetPressed+0x184>
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
			}

			while (DIO_voidGetPinValue(KPD_PORT,Local_u8Row +4) == PIN_VAL_LOW)
    258e:	89 89       	ldd	r24, Y+17	; 0x11
    2590:	98 2f       	mov	r25, r24
    2592:	9c 5f       	subi	r25, 0xFC	; 252
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	69 2f       	mov	r22, r25
    2598:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_voidGetPinValue>
    259c:	88 23       	and	r24, r24
    259e:	b9 f3       	breq	.-18     	; 0x258e <KPD_u8GetPressed+0x18c>

	for (Local_u8Col =0 ; Local_u8Col <4 ; Local_u8Col++)
	{
		DIO_voidSetPinValue(KPD_PORT,Local_u8Col,PIN_VAL_LOW); // Put GND in each Column

		for (Local_u8Row = 0 ; Local_u8Row <4 ; Local_u8Row++)
    25a0:	89 89       	ldd	r24, Y+17	; 0x11
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	89 8b       	std	Y+17, r24	; 0x11
    25a6:	89 89       	ldd	r24, Y+17	; 0x11
    25a8:	84 30       	cpi	r24, 0x04	; 4
    25aa:	08 f4       	brcc	.+2      	; 0x25ae <KPD_u8GetPressed+0x1ac>
    25ac:	5e cf       	rjmp	.-324    	; 0x246a <KPD_u8GetPressed+0x68>
			{

			}
		}

		DIO_voidSetPinValue(KPD_PORT,Local_u8Col,PIN_VAL_HIGH);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	6a 89       	ldd	r22, Y+18	; 0x12
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
	u8 Local_u8Reading;
	u8 Local_u8Key=0;

	u8 KPD_u8Values [MAX_ROW][MAX_COL] = KPD_VALUES;

	for (Local_u8Col =0 ; Local_u8Col <4 ; Local_u8Col++)
    25b8:	8a 89       	ldd	r24, Y+18	; 0x12
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	8a 8b       	std	Y+18, r24	; 0x12
    25be:	8a 89       	ldd	r24, Y+18	; 0x12
    25c0:	84 30       	cpi	r24, 0x04	; 4
    25c2:	08 f4       	brcc	.+2      	; 0x25c6 <KPD_u8GetPressed+0x1c4>
    25c4:	4b cf       	rjmp	.-362    	; 0x245c <KPD_u8GetPressed+0x5a>
			}
		}

		DIO_voidSetPinValue(KPD_PORT,Local_u8Col,PIN_VAL_HIGH);
	}
	return Local_u8Key;
    25c6:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    25c8:	a7 96       	adiw	r28, 0x27	; 39
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <main>:




void main(void)
{
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	c1 5f       	subi	r28, 0xF1	; 241
    25e8:	d0 40       	sbci	r29, 0x00	; 0
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61

	 CLCD_voidInit();
    25f4:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidInit>
     KPD_voidInit();
    25f8:	0e 94 be 11 	call	0x237c	; 0x237c <KPD_voidInit>
     DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN7,PIN_DIR_OUTPUT);
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	67 e0       	ldi	r22, 0x07	; 7
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPinDirection>

     DIO_voidSetPortDirection(DIO_PORTD,PORT_DIR_OUTPUT);
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	6f ef       	ldi	r22, 0xFF	; 255
    260a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <DIO_voidSetPortDirection>

     u8 kpd_value;
     CLCD_voidSendString("Welcome to our");
    260e:	80 e6       	ldi	r24, 0x60	; 96
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
     CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	61 e0       	ldi	r22, 0x01	; 1
    261a:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>
     CLCD_voidSendString("piano system");
    261e:	8f e6       	ldi	r24, 0x6F	; 111
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
    2626:	fe 01       	movw	r30, r28
    2628:	e5 51       	subi	r30, 0x15	; 21
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	aa e7       	ldi	r26, 0x7A	; 122
    2632:	b4 e4       	ldi	r27, 0x44	; 68
    2634:	80 83       	st	Z, r24
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	a2 83       	std	Z+2, r26	; 0x02
    263a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263c:	8e 01       	movw	r16, r28
    263e:	09 51       	subi	r16, 0x19	; 25
    2640:	1f 4f       	sbci	r17, 0xFF	; 255
    2642:	fe 01       	movw	r30, r28
    2644:	e5 51       	subi	r30, 0x15	; 21
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a ef       	ldi	r20, 0xFA	; 250
    2656:	54 e4       	ldi	r21, 0x44	; 68
    2658:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	f8 01       	movw	r30, r16
    2662:	80 83       	st	Z, r24
    2664:	91 83       	std	Z+1, r25	; 0x01
    2666:	a2 83       	std	Z+2, r26	; 0x02
    2668:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    266a:	fe 01       	movw	r30, r28
    266c:	e9 51       	subi	r30, 0x19	; 25
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	44 f4       	brge	.+16     	; 0x2698 <main+0xbe>
		__ticks = 1;
    2688:	fe 01       	movw	r30, r28
    268a:	eb 51       	subi	r30, 0x1B	; 27
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
    2696:	64 c0       	rjmp	.+200    	; 0x2760 <main+0x186>
	else if (__tmp > 65535)
    2698:	fe 01       	movw	r30, r28
    269a:	e9 51       	subi	r30, 0x19	; 25
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	3f ef       	ldi	r19, 0xFF	; 255
    26aa:	4f e7       	ldi	r20, 0x7F	; 127
    26ac:	57 e4       	ldi	r21, 0x47	; 71
    26ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26b2:	18 16       	cp	r1, r24
    26b4:	0c f0       	brlt	.+2      	; 0x26b8 <main+0xde>
    26b6:	43 c0       	rjmp	.+134    	; 0x273e <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	fe 01       	movw	r30, r28
    26ba:	e5 51       	subi	r30, 0x15	; 21
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	60 81       	ld	r22, Z
    26c0:	71 81       	ldd	r23, Z+1	; 0x01
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e2       	ldi	r20, 0x20	; 32
    26cc:	51 e4       	ldi	r21, 0x41	; 65
    26ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	8e 01       	movw	r16, r28
    26d8:	0b 51       	subi	r16, 0x1B	; 27
    26da:	1f 4f       	sbci	r17, 0xFF	; 255
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	f8 01       	movw	r30, r16
    26ea:	91 83       	std	Z+1, r25	; 0x01
    26ec:	80 83       	st	Z, r24
    26ee:	1f c0       	rjmp	.+62     	; 0x272e <main+0x154>
    26f0:	fe 01       	movw	r30, r28
    26f2:	ed 51       	subi	r30, 0x1D	; 29
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	88 ec       	ldi	r24, 0xC8	; 200
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
    26fe:	fe 01       	movw	r30, r28
    2700:	ed 51       	subi	r30, 0x1D	; 29
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <main+0x12e>
    270c:	fe 01       	movw	r30, r28
    270e:	ed 51       	subi	r30, 0x1D	; 29
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	de 01       	movw	r26, r28
    2718:	ab 51       	subi	r26, 0x1B	; 27
    271a:	bf 4f       	sbci	r27, 0xFF	; 255
    271c:	fe 01       	movw	r30, r28
    271e:	eb 51       	subi	r30, 0x1B	; 27
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	11 96       	adiw	r26, 0x01	; 1
    272a:	9c 93       	st	X, r25
    272c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272e:	fe 01       	movw	r30, r28
    2730:	eb 51       	subi	r30, 0x1B	; 27
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	d1 f6       	brne	.-76     	; 0x26f0 <main+0x116>
    273c:	27 c0       	rjmp	.+78     	; 0x278c <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273e:	8e 01       	movw	r16, r28
    2740:	0b 51       	subi	r16, 0x1B	; 27
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	fe 01       	movw	r30, r28
    2746:	e9 51       	subi	r30, 0x19	; 25
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	f8 01       	movw	r30, r16
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
    2760:	de 01       	movw	r26, r28
    2762:	af 51       	subi	r26, 0x1F	; 31
    2764:	bf 4f       	sbci	r27, 0xFF	; 255
    2766:	fe 01       	movw	r30, r28
    2768:	eb 51       	subi	r30, 0x1B	; 27
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	80 81       	ld	r24, Z
    276e:	91 81       	ldd	r25, Z+1	; 0x01
    2770:	8d 93       	st	X+, r24
    2772:	9c 93       	st	X, r25
    2774:	fe 01       	movw	r30, r28
    2776:	ef 51       	subi	r30, 0x1F	; 31
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	80 81       	ld	r24, Z
    277c:	91 81       	ldd	r25, Z+1	; 0x01
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <main+0x1a4>
    2782:	fe 01       	movw	r30, r28
    2784:	ef 51       	subi	r30, 0x1F	; 31
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	80 83       	st	Z, r24

     _delay_ms(1000);

     while(1)
     {
    	 kpd_value=KPD_u8GetPressed();
    278c:	0e 94 01 12 	call	0x2402	; 0x2402 <KPD_u8GetPressed>
    2790:	fe 01       	movw	r30, r28
    2792:	e1 51       	subi	r30, 0x11	; 17
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 83       	st	Z, r24

    	 switch(kpd_value)
    2798:	fe 01       	movw	r30, r28
    279a:	e1 51       	subi	r30, 0x11	; 17
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	80 81       	ld	r24, Z
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	c0 51       	subi	r28, 0x10	; 16
    27a6:	df 4f       	sbci	r29, 0xFF	; 255
    27a8:	39 83       	std	Y+1, r19	; 0x01
    27aa:	28 83       	st	Y, r18
    27ac:	c0 5f       	subi	r28, 0xF0	; 240
    27ae:	d0 40       	sbci	r29, 0x00	; 0
    27b0:	c0 51       	subi	r28, 0x10	; 16
    27b2:	df 4f       	sbci	r29, 0xFF	; 255
    27b4:	88 81       	ld	r24, Y
    27b6:	99 81       	ldd	r25, Y+1	; 0x01
    27b8:	c0 5f       	subi	r28, 0xF0	; 240
    27ba:	d0 40       	sbci	r29, 0x00	; 0
    27bc:	84 30       	cpi	r24, 0x04	; 4
    27be:	91 05       	cpc	r25, r1
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <main+0x1ea>
    27c2:	d5 c4       	rjmp	.+2474   	; 0x316e <main+0xb94>
    27c4:	c0 51       	subi	r28, 0x10	; 16
    27c6:	df 4f       	sbci	r29, 0xFF	; 255
    27c8:	e8 81       	ld	r30, Y
    27ca:	f9 81       	ldd	r31, Y+1	; 0x01
    27cc:	c0 5f       	subi	r28, 0xF0	; 240
    27ce:	d0 40       	sbci	r29, 0x00	; 0
    27d0:	e5 30       	cpi	r30, 0x05	; 5
    27d2:	f1 05       	cpc	r31, r1
    27d4:	f4 f4       	brge	.+60     	; 0x2812 <main+0x238>
    27d6:	c0 51       	subi	r28, 0x10	; 16
    27d8:	df 4f       	sbci	r29, 0xFF	; 255
    27da:	28 81       	ld	r18, Y
    27dc:	39 81       	ldd	r19, Y+1	; 0x01
    27de:	c0 5f       	subi	r28, 0xF0	; 240
    27e0:	d0 40       	sbci	r29, 0x00	; 0
    27e2:	22 30       	cpi	r18, 0x02	; 2
    27e4:	31 05       	cpc	r19, r1
    27e6:	09 f4       	brne	.+2      	; 0x27ea <main+0x210>
    27e8:	c0 c1       	rjmp	.+896    	; 0x2b6a <main+0x590>
    27ea:	c0 51       	subi	r28, 0x10	; 16
    27ec:	df 4f       	sbci	r29, 0xFF	; 255
    27ee:	88 81       	ld	r24, Y
    27f0:	99 81       	ldd	r25, Y+1	; 0x01
    27f2:	c0 5f       	subi	r28, 0xF0	; 240
    27f4:	d0 40       	sbci	r29, 0x00	; 0
    27f6:	83 30       	cpi	r24, 0x03	; 3
    27f8:	91 05       	cpc	r25, r1
    27fa:	0c f0       	brlt	.+2      	; 0x27fe <main+0x224>
    27fc:	37 c3       	rjmp	.+1646   	; 0x2e6c <main+0x892>
    27fe:	c0 51       	subi	r28, 0x10	; 16
    2800:	df 4f       	sbci	r29, 0xFF	; 255
    2802:	e8 81       	ld	r30, Y
    2804:	f9 81       	ldd	r31, Y+1	; 0x01
    2806:	c0 5f       	subi	r28, 0xF0	; 240
    2808:	d0 40       	sbci	r29, 0x00	; 0
    280a:	e1 30       	cpi	r30, 0x01	; 1
    280c:	f1 05       	cpc	r31, r1
    280e:	61 f1       	breq	.+88     	; 0x2868 <main+0x28e>
    2810:	bd cf       	rjmp	.-134    	; 0x278c <main+0x1b2>
    2812:	c0 51       	subi	r28, 0x10	; 16
    2814:	df 4f       	sbci	r29, 0xFF	; 255
    2816:	28 81       	ld	r18, Y
    2818:	39 81       	ldd	r19, Y+1	; 0x01
    281a:	c0 5f       	subi	r28, 0xF0	; 240
    281c:	d0 40       	sbci	r29, 0x00	; 0
    281e:	26 30       	cpi	r18, 0x06	; 6
    2820:	31 05       	cpc	r19, r1
    2822:	09 f4       	brne	.+2      	; 0x2826 <main+0x24c>
    2824:	a8 c7       	rjmp	.+3920   	; 0x3776 <main+0x119c>
    2826:	c0 51       	subi	r28, 0x10	; 16
    2828:	df 4f       	sbci	r29, 0xFF	; 255
    282a:	88 81       	ld	r24, Y
    282c:	99 81       	ldd	r25, Y+1	; 0x01
    282e:	c0 5f       	subi	r28, 0xF0	; 240
    2830:	d0 40       	sbci	r29, 0x00	; 0
    2832:	86 30       	cpi	r24, 0x06	; 6
    2834:	91 05       	cpc	r25, r1
    2836:	0c f4       	brge	.+2      	; 0x283a <main+0x260>
    2838:	1b c6       	rjmp	.+3126   	; 0x3470 <main+0xe96>
    283a:	c0 51       	subi	r28, 0x10	; 16
    283c:	df 4f       	sbci	r29, 0xFF	; 255
    283e:	e8 81       	ld	r30, Y
    2840:	f9 81       	ldd	r31, Y+1	; 0x01
    2842:	c0 5f       	subi	r28, 0xF0	; 240
    2844:	d0 40       	sbci	r29, 0x00	; 0
    2846:	e7 30       	cpi	r30, 0x07	; 7
    2848:	f1 05       	cpc	r31, r1
    284a:	11 f4       	brne	.+4      	; 0x2850 <main+0x276>
    284c:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <main+0x1444>
    2850:	c0 51       	subi	r28, 0x10	; 16
    2852:	df 4f       	sbci	r29, 0xFF	; 255
    2854:	28 81       	ld	r18, Y
    2856:	39 81       	ldd	r19, Y+1	; 0x01
    2858:	c0 5f       	subi	r28, 0xF0	; 240
    285a:	d0 40       	sbci	r29, 0x00	; 0
    285c:	28 30       	cpi	r18, 0x08	; 8
    285e:	31 05       	cpc	r19, r1
    2860:	11 f4       	brne	.+4      	; 0x2866 <main+0x28c>
    2862:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <main+0x1644>
    2866:	92 cf       	rjmp	.-220    	; 0x278c <main+0x1b2>
    	 {
    	 case 1:
    		 CLCD_voidClearScreen();
    2868:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_HIGH);
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	67 e0       	ldi	r22, 0x07	; 7
    2870:	41 e0       	ldi	r20, 0x01	; 1
    2872:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
             DIO_voidSetPortValue(DIO_PORTD,0b10000001);
    2876:	83 e0       	ldi	r24, 0x03	; 3
    2878:	61 e8       	ldi	r22, 0x81	; 129
    287a:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
             CLCD_voidSendExtraChar(CLCD_ROW_1,(CLCD_COL_1-1),1);
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 1f 0b 	call	0x163e	; 0x163e <CLCD_voidSendExtraChar>
    2888:	fe 01       	movw	r30, r28
    288a:	e3 52       	subi	r30, 0x23	; 35
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a8 e4       	ldi	r26, 0x48	; 72
    2894:	b2 e4       	ldi	r27, 0x42	; 66
    2896:	80 83       	st	Z, r24
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	a2 83       	std	Z+2, r26	; 0x02
    289c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289e:	8e 01       	movw	r16, r28
    28a0:	07 52       	subi	r16, 0x27	; 39
    28a2:	1f 4f       	sbci	r17, 0xFF	; 255
    28a4:	fe 01       	movw	r30, r28
    28a6:	e3 52       	subi	r30, 0x23	; 35
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	4a ef       	ldi	r20, 0xFA	; 250
    28b8:	54 e4       	ldi	r21, 0x44	; 68
    28ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	f8 01       	movw	r30, r16
    28c4:	80 83       	st	Z, r24
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	a2 83       	std	Z+2, r26	; 0x02
    28ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28cc:	fe 01       	movw	r30, r28
    28ce:	e7 52       	subi	r30, 0x27	; 39
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	5f e3       	ldi	r21, 0x3F	; 63
    28e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28e6:	88 23       	and	r24, r24
    28e8:	44 f4       	brge	.+16     	; 0x28fa <main+0x320>
		__ticks = 1;
    28ea:	fe 01       	movw	r30, r28
    28ec:	e9 52       	subi	r30, 0x29	; 41
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	80 83       	st	Z, r24
    28f8:	64 c0       	rjmp	.+200    	; 0x29c2 <main+0x3e8>
	else if (__tmp > 65535)
    28fa:	fe 01       	movw	r30, r28
    28fc:	e7 52       	subi	r30, 0x27	; 39
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	3f ef       	ldi	r19, 0xFF	; 255
    290c:	4f e7       	ldi	r20, 0x7F	; 127
    290e:	57 e4       	ldi	r21, 0x47	; 71
    2910:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2914:	18 16       	cp	r1, r24
    2916:	0c f0       	brlt	.+2      	; 0x291a <main+0x340>
    2918:	43 c0       	rjmp	.+134    	; 0x29a0 <main+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291a:	fe 01       	movw	r30, r28
    291c:	e3 52       	subi	r30, 0x23	; 35
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	60 81       	ld	r22, Z
    2922:	71 81       	ldd	r23, Z+1	; 0x01
    2924:	82 81       	ldd	r24, Z+2	; 0x02
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e2       	ldi	r20, 0x20	; 32
    292e:	51 e4       	ldi	r21, 0x41	; 65
    2930:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	8e 01       	movw	r16, r28
    293a:	09 52       	subi	r16, 0x29	; 41
    293c:	1f 4f       	sbci	r17, 0xFF	; 255
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	f8 01       	movw	r30, r16
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
    2950:	1f c0       	rjmp	.+62     	; 0x2990 <main+0x3b6>
    2952:	fe 01       	movw	r30, r28
    2954:	eb 52       	subi	r30, 0x2B	; 43
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	88 ec       	ldi	r24, 0xC8	; 200
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	91 83       	std	Z+1, r25	; 0x01
    295e:	80 83       	st	Z, r24
    2960:	fe 01       	movw	r30, r28
    2962:	eb 52       	subi	r30, 0x2B	; 43
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	80 81       	ld	r24, Z
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <main+0x390>
    296e:	fe 01       	movw	r30, r28
    2970:	eb 52       	subi	r30, 0x2B	; 43
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2978:	de 01       	movw	r26, r28
    297a:	a9 52       	subi	r26, 0x29	; 41
    297c:	bf 4f       	sbci	r27, 0xFF	; 255
    297e:	fe 01       	movw	r30, r28
    2980:	e9 52       	subi	r30, 0x29	; 41
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	80 81       	ld	r24, Z
    2986:	91 81       	ldd	r25, Z+1	; 0x01
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	11 96       	adiw	r26, 0x01	; 1
    298c:	9c 93       	st	X, r25
    298e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2990:	fe 01       	movw	r30, r28
    2992:	e9 52       	subi	r30, 0x29	; 41
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	d1 f6       	brne	.-76     	; 0x2952 <main+0x378>
    299e:	27 c0       	rjmp	.+78     	; 0x29ee <main+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a0:	8e 01       	movw	r16, r28
    29a2:	09 52       	subi	r16, 0x29	; 41
    29a4:	1f 4f       	sbci	r17, 0xFF	; 255
    29a6:	fe 01       	movw	r30, r28
    29a8:	e7 52       	subi	r30, 0x27	; 39
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	f8 01       	movw	r30, r16
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
    29c2:	de 01       	movw	r26, r28
    29c4:	ad 52       	subi	r26, 0x2D	; 45
    29c6:	bf 4f       	sbci	r27, 0xFF	; 255
    29c8:	fe 01       	movw	r30, r28
    29ca:	e9 52       	subi	r30, 0x29	; 41
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	8d 93       	st	X+, r24
    29d4:	9c 93       	st	X, r25
    29d6:	fe 01       	movw	r30, r28
    29d8:	ed 52       	subi	r30, 0x2D	; 45
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 81       	ld	r24, Z
    29de:	91 81       	ldd	r25, Z+1	; 0x01
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <main+0x406>
    29e4:	fe 01       	movw	r30, r28
    29e6:	ed 52       	subi	r30, 0x2D	; 45
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	91 83       	std	Z+1, r25	; 0x01
    29ec:	80 83       	st	Z, r24
             _delay_ms(50);

             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_LOW);
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	67 e0       	ldi	r22, 0x07	; 7
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
              DIO_voidSetPortValue(DIO_PORTD,0b00000000);
    29f8:	83 e0       	ldi	r24, 0x03	; 3
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    2a00:	fe 01       	movw	r30, r28
    2a02:	e1 53       	subi	r30, 0x31	; 49
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	a8 e4       	ldi	r26, 0x48	; 72
    2a0c:	b2 e4       	ldi	r27, 0x42	; 66
    2a0e:	80 83       	st	Z, r24
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	a2 83       	std	Z+2, r26	; 0x02
    2a14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a16:	8e 01       	movw	r16, r28
    2a18:	05 53       	subi	r16, 0x35	; 53
    2a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e1 53       	subi	r30, 0x31	; 49
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	4a ef       	ldi	r20, 0xFA	; 250
    2a30:	54 e4       	ldi	r21, 0x44	; 68
    2a32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	f8 01       	movw	r30, r16
    2a3c:	80 83       	st	Z, r24
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	a2 83       	std	Z+2, r26	; 0x02
    2a42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a44:	fe 01       	movw	r30, r28
    2a46:	e5 53       	subi	r30, 0x35	; 53
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	60 81       	ld	r22, Z
    2a4c:	71 81       	ldd	r23, Z+1	; 0x01
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e8       	ldi	r20, 0x80	; 128
    2a58:	5f e3       	ldi	r21, 0x3F	; 63
    2a5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a5e:	88 23       	and	r24, r24
    2a60:	44 f4       	brge	.+16     	; 0x2a72 <main+0x498>
		__ticks = 1;
    2a62:	fe 01       	movw	r30, r28
    2a64:	e7 53       	subi	r30, 0x37	; 55
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
    2a70:	64 c0       	rjmp	.+200    	; 0x2b3a <main+0x560>
	else if (__tmp > 65535)
    2a72:	fe 01       	movw	r30, r28
    2a74:	e5 53       	subi	r30, 0x35	; 53
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	0c f0       	brlt	.+2      	; 0x2a92 <main+0x4b8>
    2a90:	43 c0       	rjmp	.+134    	; 0x2b18 <main+0x53e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a92:	fe 01       	movw	r30, r28
    2a94:	e1 53       	subi	r30, 0x31	; 49
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e2       	ldi	r20, 0x20	; 32
    2aa6:	51 e4       	ldi	r21, 0x41	; 65
    2aa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	8e 01       	movw	r16, r28
    2ab2:	07 53       	subi	r16, 0x37	; 55
    2ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	80 83       	st	Z, r24
    2ac8:	1f c0       	rjmp	.+62     	; 0x2b08 <main+0x52e>
    2aca:	fe 01       	movw	r30, r28
    2acc:	e9 53       	subi	r30, 0x39	; 57
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	88 ec       	ldi	r24, 0xC8	; 200
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	80 83       	st	Z, r24
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e9 53       	subi	r30, 0x39	; 57
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <main+0x508>
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e9 53       	subi	r30, 0x39	; 57
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af0:	de 01       	movw	r26, r28
    2af2:	a7 53       	subi	r26, 0x37	; 55
    2af4:	bf 4f       	sbci	r27, 0xFF	; 255
    2af6:	fe 01       	movw	r30, r28
    2af8:	e7 53       	subi	r30, 0x37	; 55
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	80 81       	ld	r24, Z
    2afe:	91 81       	ldd	r25, Z+1	; 0x01
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	11 96       	adiw	r26, 0x01	; 1
    2b04:	9c 93       	st	X, r25
    2b06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e7 53       	subi	r30, 0x37	; 55
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	91 81       	ldd	r25, Z+1	; 0x01
    2b12:	00 97       	sbiw	r24, 0x00	; 0
    2b14:	d1 f6       	brne	.-76     	; 0x2aca <main+0x4f0>
    2b16:	3a ce       	rjmp	.-908    	; 0x278c <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b18:	8e 01       	movw	r16, r28
    2b1a:	07 53       	subi	r16, 0x37	; 55
    2b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e5 53       	subi	r30, 0x35	; 53
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	f8 01       	movw	r30, r16
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
    2b3a:	de 01       	movw	r26, r28
    2b3c:	ab 53       	subi	r26, 0x3B	; 59
    2b3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b40:	fe 01       	movw	r30, r28
    2b42:	e7 53       	subi	r30, 0x37	; 55
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 81       	ld	r24, Z
    2b48:	91 81       	ldd	r25, Z+1	; 0x01
    2b4a:	11 96       	adiw	r26, 0x01	; 1
    2b4c:	9c 93       	st	X, r25
    2b4e:	8e 93       	st	-X, r24
    2b50:	fe 01       	movw	r30, r28
    2b52:	eb 53       	subi	r30, 0x3B	; 59
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 81       	ld	r24, Z
    2b58:	91 81       	ldd	r25, Z+1	; 0x01
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <main+0x580>
    2b5e:	fe 01       	movw	r30, r28
    2b60:	eb 53       	subi	r30, 0x3B	; 59
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	80 83       	st	Z, r24
    2b68:	11 ce       	rjmp	.-990    	; 0x278c <main+0x1b2>
              _delay_ms(50);
              break;


    	 case 2:
    	    		 CLCD_voidClearScreen();
    2b6a:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_HIGH);
    2b6e:	82 e0       	ldi	r24, 0x02	; 2
    2b70:	67 e0       	ldi	r22, 0x07	; 7
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	             DIO_voidSetPortValue(DIO_PORTD,0b10000010);
    2b78:	83 e0       	ldi	r24, 0x03	; 3
    2b7a:	62 e8       	ldi	r22, 0x82	; 130
    2b7c:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    	             CLCD_voidSendExtraChar(CLCD_ROW_1,(CLCD_COL_1-1),2);
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	42 e0       	ldi	r20, 0x02	; 2
    2b86:	0e 94 1f 0b 	call	0x163e	; 0x163e <CLCD_voidSendExtraChar>
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	ef 53       	subi	r30, 0x3F	; 63
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	a8 ec       	ldi	r26, 0xC8	; 200
    2b96:	b2 e4       	ldi	r27, 0x42	; 66
    2b98:	80 83       	st	Z, r24
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	a2 83       	std	Z+2, r26	; 0x02
    2b9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba0:	8e 01       	movw	r16, r28
    2ba2:	03 54       	subi	r16, 0x43	; 67
    2ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	ef 53       	subi	r30, 0x3F	; 63
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	4a ef       	ldi	r20, 0xFA	; 250
    2bba:	54 e4       	ldi	r21, 0x44	; 68
    2bbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	f8 01       	movw	r30, r16
    2bc6:	80 83       	st	Z, r24
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	a2 83       	std	Z+2, r26	; 0x02
    2bcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e3 54       	subi	r30, 0x43	; 67
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e8       	ldi	r20, 0x80	; 128
    2be2:	5f e3       	ldi	r21, 0x3F	; 63
    2be4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2be8:	88 23       	and	r24, r24
    2bea:	44 f4       	brge	.+16     	; 0x2bfc <main+0x622>
		__ticks = 1;
    2bec:	fe 01       	movw	r30, r28
    2bee:	e5 54       	subi	r30, 0x45	; 69
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	80 83       	st	Z, r24
    2bfa:	64 c0       	rjmp	.+200    	; 0x2cc4 <main+0x6ea>
	else if (__tmp > 65535)
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e3 54       	subi	r30, 0x43	; 67
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	60 81       	ld	r22, Z
    2c04:	71 81       	ldd	r23, Z+1	; 0x01
    2c06:	82 81       	ldd	r24, Z+2	; 0x02
    2c08:	93 81       	ldd	r25, Z+3	; 0x03
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	3f ef       	ldi	r19, 0xFF	; 255
    2c0e:	4f e7       	ldi	r20, 0x7F	; 127
    2c10:	57 e4       	ldi	r21, 0x47	; 71
    2c12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c16:	18 16       	cp	r1, r24
    2c18:	0c f0       	brlt	.+2      	; 0x2c1c <main+0x642>
    2c1a:	43 c0       	rjmp	.+134    	; 0x2ca2 <main+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	ef 53       	subi	r30, 0x3F	; 63
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	60 81       	ld	r22, Z
    2c24:	71 81       	ldd	r23, Z+1	; 0x01
    2c26:	82 81       	ldd	r24, Z+2	; 0x02
    2c28:	93 81       	ldd	r25, Z+3	; 0x03
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e2       	ldi	r20, 0x20	; 32
    2c30:	51 e4       	ldi	r21, 0x41	; 65
    2c32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	8e 01       	movw	r16, r28
    2c3c:	05 54       	subi	r16, 0x45	; 69
    2c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c40:	bc 01       	movw	r22, r24
    2c42:	cd 01       	movw	r24, r26
    2c44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
    2c52:	1f c0       	rjmp	.+62     	; 0x2c92 <main+0x6b8>
    2c54:	fe 01       	movw	r30, r28
    2c56:	e7 54       	subi	r30, 0x47	; 71
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	88 ec       	ldi	r24, 0xC8	; 200
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	80 83       	st	Z, r24
    2c62:	fe 01       	movw	r30, r28
    2c64:	e7 54       	subi	r30, 0x47	; 71
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	80 81       	ld	r24, Z
    2c6a:	91 81       	ldd	r25, Z+1	; 0x01
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <main+0x692>
    2c70:	fe 01       	movw	r30, r28
    2c72:	e7 54       	subi	r30, 0x47	; 71
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	de 01       	movw	r26, r28
    2c7c:	a5 54       	subi	r26, 0x45	; 69
    2c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c80:	fe 01       	movw	r30, r28
    2c82:	e5 54       	subi	r30, 0x45	; 69
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	11 96       	adiw	r26, 0x01	; 1
    2c8e:	9c 93       	st	X, r25
    2c90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c92:	fe 01       	movw	r30, r28
    2c94:	e5 54       	subi	r30, 0x45	; 69
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 81       	ld	r24, Z
    2c9a:	91 81       	ldd	r25, Z+1	; 0x01
    2c9c:	00 97       	sbiw	r24, 0x00	; 0
    2c9e:	d1 f6       	brne	.-76     	; 0x2c54 <main+0x67a>
    2ca0:	27 c0       	rjmp	.+78     	; 0x2cf0 <main+0x716>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca2:	8e 01       	movw	r16, r28
    2ca4:	05 54       	subi	r16, 0x45	; 69
    2ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e3 54       	subi	r30, 0x43	; 67
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	60 81       	ld	r22, Z
    2cb0:	71 81       	ldd	r23, Z+1	; 0x01
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	f8 01       	movw	r30, r16
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	80 83       	st	Z, r24
    2cc4:	de 01       	movw	r26, r28
    2cc6:	a9 54       	subi	r26, 0x49	; 73
    2cc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e5 54       	subi	r30, 0x45	; 69
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 81       	ld	r24, Z
    2cd2:	91 81       	ldd	r25, Z+1	; 0x01
    2cd4:	8d 93       	st	X+, r24
    2cd6:	9c 93       	st	X, r25
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e9 54       	subi	r30, 0x49	; 73
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 81       	ld	r24, Z
    2ce0:	91 81       	ldd	r25, Z+1	; 0x01
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <main+0x708>
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e9 54       	subi	r30, 0x49	; 73
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	80 83       	st	Z, r24
    	             _delay_ms(100);

    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_LOW);
    2cf0:	82 e0       	ldi	r24, 0x02	; 2
    2cf2:	67 e0       	ldi	r22, 0x07	; 7
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	              DIO_voidSetPortValue(DIO_PORTD,0b00000000);
    2cfa:	83 e0       	ldi	r24, 0x03	; 3
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    2d02:	fe 01       	movw	r30, r28
    2d04:	ed 54       	subi	r30, 0x4D	; 77
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	a8 ec       	ldi	r26, 0xC8	; 200
    2d0e:	b2 e4       	ldi	r27, 0x42	; 66
    2d10:	80 83       	st	Z, r24
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	a2 83       	std	Z+2, r26	; 0x02
    2d16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d18:	8e 01       	movw	r16, r28
    2d1a:	01 55       	subi	r16, 0x51	; 81
    2d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1e:	fe 01       	movw	r30, r28
    2d20:	ed 54       	subi	r30, 0x4D	; 77
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	60 81       	ld	r22, Z
    2d26:	71 81       	ldd	r23, Z+1	; 0x01
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	4a ef       	ldi	r20, 0xFA	; 250
    2d32:	54 e4       	ldi	r21, 0x44	; 68
    2d34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	80 83       	st	Z, r24
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	a2 83       	std	Z+2, r26	; 0x02
    2d44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d46:	fe 01       	movw	r30, r28
    2d48:	e1 55       	subi	r30, 0x51	; 81
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	5f e3       	ldi	r21, 0x3F	; 63
    2d5c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d60:	88 23       	and	r24, r24
    2d62:	44 f4       	brge	.+16     	; 0x2d74 <main+0x79a>
		__ticks = 1;
    2d64:	fe 01       	movw	r30, r28
    2d66:	e3 55       	subi	r30, 0x53	; 83
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	80 83       	st	Z, r24
    2d72:	64 c0       	rjmp	.+200    	; 0x2e3c <main+0x862>
	else if (__tmp > 65535)
    2d74:	fe 01       	movw	r30, r28
    2d76:	e1 55       	subi	r30, 0x51	; 81
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	60 81       	ld	r22, Z
    2d7c:	71 81       	ldd	r23, Z+1	; 0x01
    2d7e:	82 81       	ldd	r24, Z+2	; 0x02
    2d80:	93 81       	ldd	r25, Z+3	; 0x03
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	0c f0       	brlt	.+2      	; 0x2d94 <main+0x7ba>
    2d92:	43 c0       	rjmp	.+134    	; 0x2e1a <main+0x840>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d94:	fe 01       	movw	r30, r28
    2d96:	ed 54       	subi	r30, 0x4D	; 77
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	51 e4       	ldi	r21, 0x41	; 65
    2daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	8e 01       	movw	r16, r28
    2db4:	03 55       	subi	r16, 0x53	; 83
    2db6:	1f 4f       	sbci	r17, 0xFF	; 255
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	80 83       	st	Z, r24
    2dca:	1f c0       	rjmp	.+62     	; 0x2e0a <main+0x830>
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e5 55       	subi	r30, 0x55	; 85
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	88 ec       	ldi	r24, 0xC8	; 200
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e5 55       	subi	r30, 0x55	; 85
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	91 81       	ldd	r25, Z+1	; 0x01
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <main+0x80a>
    2de8:	fe 01       	movw	r30, r28
    2dea:	e5 55       	subi	r30, 0x55	; 85
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df2:	de 01       	movw	r26, r28
    2df4:	a3 55       	subi	r26, 0x53	; 83
    2df6:	bf 4f       	sbci	r27, 0xFF	; 255
    2df8:	fe 01       	movw	r30, r28
    2dfa:	e3 55       	subi	r30, 0x53	; 83
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	80 81       	ld	r24, Z
    2e00:	91 81       	ldd	r25, Z+1	; 0x01
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	11 96       	adiw	r26, 0x01	; 1
    2e06:	9c 93       	st	X, r25
    2e08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e3 55       	subi	r30, 0x53	; 83
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	91 81       	ldd	r25, Z+1	; 0x01
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	d1 f6       	brne	.-76     	; 0x2dcc <main+0x7f2>
    2e18:	b9 cc       	rjmp	.-1678   	; 0x278c <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1a:	8e 01       	movw	r16, r28
    2e1c:	03 55       	subi	r16, 0x53	; 83
    2e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e20:	fe 01       	movw	r30, r28
    2e22:	e1 55       	subi	r30, 0x51	; 81
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	60 81       	ld	r22, Z
    2e28:	71 81       	ldd	r23, Z+1	; 0x01
    2e2a:	82 81       	ldd	r24, Z+2	; 0x02
    2e2c:	93 81       	ldd	r25, Z+3	; 0x03
    2e2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	f8 01       	movw	r30, r16
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	80 83       	st	Z, r24
    2e3c:	de 01       	movw	r26, r28
    2e3e:	a7 55       	subi	r26, 0x57	; 87
    2e40:	bf 4f       	sbci	r27, 0xFF	; 255
    2e42:	fe 01       	movw	r30, r28
    2e44:	e3 55       	subi	r30, 0x53	; 83
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	11 96       	adiw	r26, 0x01	; 1
    2e4e:	9c 93       	st	X, r25
    2e50:	8e 93       	st	-X, r24
    2e52:	fe 01       	movw	r30, r28
    2e54:	e7 55       	subi	r30, 0x57	; 87
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	80 81       	ld	r24, Z
    2e5a:	91 81       	ldd	r25, Z+1	; 0x01
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <main+0x882>
    2e60:	fe 01       	movw	r30, r28
    2e62:	e7 55       	subi	r30, 0x57	; 87
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
    2e6a:	90 cc       	rjmp	.-1760   	; 0x278c <main+0x1b2>
    	              _delay_ms(100);
    	              break;

    	 case 3:
    	    	    		 CLCD_voidClearScreen();
    2e6c:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_HIGH);
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	67 e0       	ldi	r22, 0x07	; 7
    2e74:	41 e0       	ldi	r20, 0x01	; 1
    2e76:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	             DIO_voidSetPortValue(DIO_PORTD,0b10000100);
    2e7a:	83 e0       	ldi	r24, 0x03	; 3
    2e7c:	64 e8       	ldi	r22, 0x84	; 132
    2e7e:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    	    	             CLCD_voidSendExtraChar(CLCD_ROW_1,(CLCD_COL_1-1),3);
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	60 e0       	ldi	r22, 0x00	; 0
    2e86:	43 e0       	ldi	r20, 0x03	; 3
    2e88:	0e 94 1f 0b 	call	0x163e	; 0x163e <CLCD_voidSendExtraChar>
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	eb 55       	subi	r30, 0x5B	; 91
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	a6 e1       	ldi	r26, 0x16	; 22
    2e98:	b3 e4       	ldi	r27, 0x43	; 67
    2e9a:	80 83       	st	Z, r24
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	a2 83       	std	Z+2, r26	; 0x02
    2ea0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea2:	8e 01       	movw	r16, r28
    2ea4:	0f 55       	subi	r16, 0x5F	; 95
    2ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	eb 55       	subi	r30, 0x5B	; 91
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	60 81       	ld	r22, Z
    2eb0:	71 81       	ldd	r23, Z+1	; 0x01
    2eb2:	82 81       	ldd	r24, Z+2	; 0x02
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	4a ef       	ldi	r20, 0xFA	; 250
    2ebc:	54 e4       	ldi	r21, 0x44	; 68
    2ebe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	80 83       	st	Z, r24
    2eca:	91 83       	std	Z+1, r25	; 0x01
    2ecc:	a2 83       	std	Z+2, r26	; 0x02
    2ece:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ef 55       	subi	r30, 0x5F	; 95
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	60 81       	ld	r22, Z
    2ed8:	71 81       	ldd	r23, Z+1	; 0x01
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	93 81       	ldd	r25, Z+3	; 0x03
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e8       	ldi	r20, 0x80	; 128
    2ee4:	5f e3       	ldi	r21, 0x3F	; 63
    2ee6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2eea:	88 23       	and	r24, r24
    2eec:	44 f4       	brge	.+16     	; 0x2efe <main+0x924>
		__ticks = 1;
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e1 56       	subi	r30, 0x61	; 97
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	91 83       	std	Z+1, r25	; 0x01
    2efa:	80 83       	st	Z, r24
    2efc:	64 c0       	rjmp	.+200    	; 0x2fc6 <main+0x9ec>
	else if (__tmp > 65535)
    2efe:	fe 01       	movw	r30, r28
    2f00:	ef 55       	subi	r30, 0x5F	; 95
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	60 81       	ld	r22, Z
    2f06:	71 81       	ldd	r23, Z+1	; 0x01
    2f08:	82 81       	ldd	r24, Z+2	; 0x02
    2f0a:	93 81       	ldd	r25, Z+3	; 0x03
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	3f ef       	ldi	r19, 0xFF	; 255
    2f10:	4f e7       	ldi	r20, 0x7F	; 127
    2f12:	57 e4       	ldi	r21, 0x47	; 71
    2f14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f18:	18 16       	cp	r1, r24
    2f1a:	0c f0       	brlt	.+2      	; 0x2f1e <main+0x944>
    2f1c:	43 c0       	rjmp	.+134    	; 0x2fa4 <main+0x9ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1e:	fe 01       	movw	r30, r28
    2f20:	eb 55       	subi	r30, 0x5B	; 91
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	60 81       	ld	r22, Z
    2f26:	71 81       	ldd	r23, Z+1	; 0x01
    2f28:	82 81       	ldd	r24, Z+2	; 0x02
    2f2a:	93 81       	ldd	r25, Z+3	; 0x03
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e2       	ldi	r20, 0x20	; 32
    2f32:	51 e4       	ldi	r21, 0x41	; 65
    2f34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	8e 01       	movw	r16, r28
    2f3e:	01 56       	subi	r16, 0x61	; 97
    2f40:	1f 4f       	sbci	r17, 0xFF	; 255
    2f42:	bc 01       	movw	r22, r24
    2f44:	cd 01       	movw	r24, r26
    2f46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	f8 01       	movw	r30, r16
    2f50:	91 83       	std	Z+1, r25	; 0x01
    2f52:	80 83       	st	Z, r24
    2f54:	1f c0       	rjmp	.+62     	; 0x2f94 <main+0x9ba>
    2f56:	fe 01       	movw	r30, r28
    2f58:	e3 56       	subi	r30, 0x63	; 99
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	88 ec       	ldi	r24, 0xC8	; 200
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	91 83       	std	Z+1, r25	; 0x01
    2f62:	80 83       	st	Z, r24
    2f64:	fe 01       	movw	r30, r28
    2f66:	e3 56       	subi	r30, 0x63	; 99
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	80 81       	ld	r24, Z
    2f6c:	91 81       	ldd	r25, Z+1	; 0x01
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <main+0x994>
    2f72:	fe 01       	movw	r30, r28
    2f74:	e3 56       	subi	r30, 0x63	; 99
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	91 83       	std	Z+1, r25	; 0x01
    2f7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7c:	de 01       	movw	r26, r28
    2f7e:	a1 56       	subi	r26, 0x61	; 97
    2f80:	bf 4f       	sbci	r27, 0xFF	; 255
    2f82:	fe 01       	movw	r30, r28
    2f84:	e1 56       	subi	r30, 0x61	; 97
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	11 96       	adiw	r26, 0x01	; 1
    2f90:	9c 93       	st	X, r25
    2f92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f94:	fe 01       	movw	r30, r28
    2f96:	e1 56       	subi	r30, 0x61	; 97
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 81       	ld	r24, Z
    2f9c:	91 81       	ldd	r25, Z+1	; 0x01
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	d1 f6       	brne	.-76     	; 0x2f56 <main+0x97c>
    2fa2:	27 c0       	rjmp	.+78     	; 0x2ff2 <main+0xa18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa4:	8e 01       	movw	r16, r28
    2fa6:	01 56       	subi	r16, 0x61	; 97
    2fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2faa:	fe 01       	movw	r30, r28
    2fac:	ef 55       	subi	r30, 0x5F	; 95
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	60 81       	ld	r22, Z
    2fb2:	71 81       	ldd	r23, Z+1	; 0x01
    2fb4:	82 81       	ldd	r24, Z+2	; 0x02
    2fb6:	93 81       	ldd	r25, Z+3	; 0x03
    2fb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	91 83       	std	Z+1, r25	; 0x01
    2fc4:	80 83       	st	Z, r24
    2fc6:	de 01       	movw	r26, r28
    2fc8:	a5 56       	subi	r26, 0x65	; 101
    2fca:	bf 4f       	sbci	r27, 0xFF	; 255
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e1 56       	subi	r30, 0x61	; 97
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	80 81       	ld	r24, Z
    2fd4:	91 81       	ldd	r25, Z+1	; 0x01
    2fd6:	8d 93       	st	X+, r24
    2fd8:	9c 93       	st	X, r25
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e5 56       	subi	r30, 0x65	; 101
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	91 81       	ldd	r25, Z+1	; 0x01
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <main+0xa0a>
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e5 56       	subi	r30, 0x65	; 101
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	80 83       	st	Z, r24
    	    	             _delay_ms(150);

    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_LOW);
    2ff2:	82 e0       	ldi	r24, 0x02	; 2
    2ff4:	67 e0       	ldi	r22, 0x07	; 7
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	              DIO_voidSetPortValue(DIO_PORTD,0b00000000);
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    3004:	fe 01       	movw	r30, r28
    3006:	e9 56       	subi	r30, 0x69	; 105
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	a6 e1       	ldi	r26, 0x16	; 22
    3010:	b3 e4       	ldi	r27, 0x43	; 67
    3012:	80 83       	st	Z, r24
    3014:	91 83       	std	Z+1, r25	; 0x01
    3016:	a2 83       	std	Z+2, r26	; 0x02
    3018:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301a:	8e 01       	movw	r16, r28
    301c:	0d 56       	subi	r16, 0x6D	; 109
    301e:	1f 4f       	sbci	r17, 0xFF	; 255
    3020:	fe 01       	movw	r30, r28
    3022:	e9 56       	subi	r30, 0x69	; 105
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	60 81       	ld	r22, Z
    3028:	71 81       	ldd	r23, Z+1	; 0x01
    302a:	82 81       	ldd	r24, Z+2	; 0x02
    302c:	93 81       	ldd	r25, Z+3	; 0x03
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	4a ef       	ldi	r20, 0xFA	; 250
    3034:	54 e4       	ldi	r21, 0x44	; 68
    3036:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	f8 01       	movw	r30, r16
    3040:	80 83       	st	Z, r24
    3042:	91 83       	std	Z+1, r25	; 0x01
    3044:	a2 83       	std	Z+2, r26	; 0x02
    3046:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3048:	fe 01       	movw	r30, r28
    304a:	ed 56       	subi	r30, 0x6D	; 109
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	60 81       	ld	r22, Z
    3050:	71 81       	ldd	r23, Z+1	; 0x01
    3052:	82 81       	ldd	r24, Z+2	; 0x02
    3054:	93 81       	ldd	r25, Z+3	; 0x03
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e8       	ldi	r20, 0x80	; 128
    305c:	5f e3       	ldi	r21, 0x3F	; 63
    305e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3062:	88 23       	and	r24, r24
    3064:	44 f4       	brge	.+16     	; 0x3076 <main+0xa9c>
		__ticks = 1;
    3066:	fe 01       	movw	r30, r28
    3068:	ef 56       	subi	r30, 0x6F	; 111
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	91 83       	std	Z+1, r25	; 0x01
    3072:	80 83       	st	Z, r24
    3074:	64 c0       	rjmp	.+200    	; 0x313e <main+0xb64>
	else if (__tmp > 65535)
    3076:	fe 01       	movw	r30, r28
    3078:	ed 56       	subi	r30, 0x6D	; 109
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	60 81       	ld	r22, Z
    307e:	71 81       	ldd	r23, Z+1	; 0x01
    3080:	82 81       	ldd	r24, Z+2	; 0x02
    3082:	93 81       	ldd	r25, Z+3	; 0x03
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	3f ef       	ldi	r19, 0xFF	; 255
    3088:	4f e7       	ldi	r20, 0x7F	; 127
    308a:	57 e4       	ldi	r21, 0x47	; 71
    308c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3090:	18 16       	cp	r1, r24
    3092:	0c f0       	brlt	.+2      	; 0x3096 <main+0xabc>
    3094:	43 c0       	rjmp	.+134    	; 0x311c <main+0xb42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3096:	fe 01       	movw	r30, r28
    3098:	e9 56       	subi	r30, 0x69	; 105
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	60 81       	ld	r22, Z
    309e:	71 81       	ldd	r23, Z+1	; 0x01
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	93 81       	ldd	r25, Z+3	; 0x03
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e2       	ldi	r20, 0x20	; 32
    30aa:	51 e4       	ldi	r21, 0x41	; 65
    30ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	8e 01       	movw	r16, r28
    30b6:	0f 56       	subi	r16, 0x6F	; 111
    30b8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	f8 01       	movw	r30, r16
    30c8:	91 83       	std	Z+1, r25	; 0x01
    30ca:	80 83       	st	Z, r24
    30cc:	1f c0       	rjmp	.+62     	; 0x310c <main+0xb32>
    30ce:	fe 01       	movw	r30, r28
    30d0:	e1 57       	subi	r30, 0x71	; 113
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	88 ec       	ldi	r24, 0xC8	; 200
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	91 83       	std	Z+1, r25	; 0x01
    30da:	80 83       	st	Z, r24
    30dc:	fe 01       	movw	r30, r28
    30de:	e1 57       	subi	r30, 0x71	; 113
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	80 81       	ld	r24, Z
    30e4:	91 81       	ldd	r25, Z+1	; 0x01
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <main+0xb0c>
    30ea:	fe 01       	movw	r30, r28
    30ec:	e1 57       	subi	r30, 0x71	; 113
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f4:	de 01       	movw	r26, r28
    30f6:	af 56       	subi	r26, 0x6F	; 111
    30f8:	bf 4f       	sbci	r27, 0xFF	; 255
    30fa:	fe 01       	movw	r30, r28
    30fc:	ef 56       	subi	r30, 0x6F	; 111
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	11 96       	adiw	r26, 0x01	; 1
    3108:	9c 93       	st	X, r25
    310a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310c:	fe 01       	movw	r30, r28
    310e:	ef 56       	subi	r30, 0x6F	; 111
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	80 81       	ld	r24, Z
    3114:	91 81       	ldd	r25, Z+1	; 0x01
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	d1 f6       	brne	.-76     	; 0x30ce <main+0xaf4>
    311a:	38 cb       	rjmp	.-2448   	; 0x278c <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311c:	8e 01       	movw	r16, r28
    311e:	0f 56       	subi	r16, 0x6F	; 111
    3120:	1f 4f       	sbci	r17, 0xFF	; 255
    3122:	fe 01       	movw	r30, r28
    3124:	ed 56       	subi	r30, 0x6D	; 109
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	60 81       	ld	r22, Z
    312a:	71 81       	ldd	r23, Z+1	; 0x01
    312c:	82 81       	ldd	r24, Z+2	; 0x02
    312e:	93 81       	ldd	r25, Z+3	; 0x03
    3130:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	f8 01       	movw	r30, r16
    313a:	91 83       	std	Z+1, r25	; 0x01
    313c:	80 83       	st	Z, r24
    313e:	de 01       	movw	r26, r28
    3140:	a3 57       	subi	r26, 0x73	; 115
    3142:	bf 4f       	sbci	r27, 0xFF	; 255
    3144:	fe 01       	movw	r30, r28
    3146:	ef 56       	subi	r30, 0x6F	; 111
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	80 81       	ld	r24, Z
    314c:	91 81       	ldd	r25, Z+1	; 0x01
    314e:	11 96       	adiw	r26, 0x01	; 1
    3150:	9c 93       	st	X, r25
    3152:	8e 93       	st	-X, r24
    3154:	fe 01       	movw	r30, r28
    3156:	e3 57       	subi	r30, 0x73	; 115
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	80 81       	ld	r24, Z
    315c:	91 81       	ldd	r25, Z+1	; 0x01
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <main+0xb84>
    3162:	fe 01       	movw	r30, r28
    3164:	e3 57       	subi	r30, 0x73	; 115
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	91 83       	std	Z+1, r25	; 0x01
    316a:	80 83       	st	Z, r24
    316c:	0f cb       	rjmp	.-2530   	; 0x278c <main+0x1b2>
    	    	              _delay_ms(150);
    	    	              break;

    	 case 4:
    	    	    		 CLCD_voidClearScreen();
    316e:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_HIGH);
    3172:	82 e0       	ldi	r24, 0x02	; 2
    3174:	67 e0       	ldi	r22, 0x07	; 7
    3176:	41 e0       	ldi	r20, 0x01	; 1
    3178:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	             DIO_voidSetPortValue(DIO_PORTD,0b00011000);
    317c:	83 e0       	ldi	r24, 0x03	; 3
    317e:	68 e1       	ldi	r22, 0x18	; 24
    3180:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    	    	             CLCD_voidSendExtraChar(CLCD_ROW_1,(CLCD_COL_1-1),4);
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	44 e0       	ldi	r20, 0x04	; 4
    318a:	0e 94 1f 0b 	call	0x163e	; 0x163e <CLCD_voidSendExtraChar>
    318e:	fe 01       	movw	r30, r28
    3190:	e7 57       	subi	r30, 0x77	; 119
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	a8 e4       	ldi	r26, 0x48	; 72
    319a:	b3 e4       	ldi	r27, 0x43	; 67
    319c:	80 83       	st	Z, r24
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	a2 83       	std	Z+2, r26	; 0x02
    31a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a4:	8e 01       	movw	r16, r28
    31a6:	0b 57       	subi	r16, 0x7B	; 123
    31a8:	1f 4f       	sbci	r17, 0xFF	; 255
    31aa:	fe 01       	movw	r30, r28
    31ac:	e7 57       	subi	r30, 0x77	; 119
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	60 81       	ld	r22, Z
    31b2:	71 81       	ldd	r23, Z+1	; 0x01
    31b4:	82 81       	ldd	r24, Z+2	; 0x02
    31b6:	93 81       	ldd	r25, Z+3	; 0x03
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	4a ef       	ldi	r20, 0xFA	; 250
    31be:	54 e4       	ldi	r21, 0x44	; 68
    31c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	f8 01       	movw	r30, r16
    31ca:	80 83       	st	Z, r24
    31cc:	91 83       	std	Z+1, r25	; 0x01
    31ce:	a2 83       	std	Z+2, r26	; 0x02
    31d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d2:	fe 01       	movw	r30, r28
    31d4:	eb 57       	subi	r30, 0x7B	; 123
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31ec:	88 23       	and	r24, r24
    31ee:	44 f4       	brge	.+16     	; 0x3200 <main+0xc26>
		__ticks = 1;
    31f0:	fe 01       	movw	r30, r28
    31f2:	ed 57       	subi	r30, 0x7D	; 125
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	80 83       	st	Z, r24
    31fe:	64 c0       	rjmp	.+200    	; 0x32c8 <main+0xcee>
	else if (__tmp > 65535)
    3200:	fe 01       	movw	r30, r28
    3202:	eb 57       	subi	r30, 0x7B	; 123
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	93 81       	ldd	r25, Z+3	; 0x03
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	3f ef       	ldi	r19, 0xFF	; 255
    3212:	4f e7       	ldi	r20, 0x7F	; 127
    3214:	57 e4       	ldi	r21, 0x47	; 71
    3216:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    321a:	18 16       	cp	r1, r24
    321c:	0c f0       	brlt	.+2      	; 0x3220 <main+0xc46>
    321e:	43 c0       	rjmp	.+134    	; 0x32a6 <main+0xccc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3220:	fe 01       	movw	r30, r28
    3222:	e7 57       	subi	r30, 0x77	; 119
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	60 81       	ld	r22, Z
    3228:	71 81       	ldd	r23, Z+1	; 0x01
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e2       	ldi	r20, 0x20	; 32
    3234:	51 e4       	ldi	r21, 0x41	; 65
    3236:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	8e 01       	movw	r16, r28
    3240:	0d 57       	subi	r16, 0x7D	; 125
    3242:	1f 4f       	sbci	r17, 0xFF	; 255
    3244:	bc 01       	movw	r22, r24
    3246:	cd 01       	movw	r24, r26
    3248:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	f8 01       	movw	r30, r16
    3252:	91 83       	std	Z+1, r25	; 0x01
    3254:	80 83       	st	Z, r24
    3256:	1f c0       	rjmp	.+62     	; 0x3296 <main+0xcbc>
    3258:	fe 01       	movw	r30, r28
    325a:	ef 57       	subi	r30, 0x7F	; 127
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	88 ec       	ldi	r24, 0xC8	; 200
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	91 83       	std	Z+1, r25	; 0x01
    3264:	80 83       	st	Z, r24
    3266:	fe 01       	movw	r30, r28
    3268:	ef 57       	subi	r30, 0x7F	; 127
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	80 81       	ld	r24, Z
    326e:	91 81       	ldd	r25, Z+1	; 0x01
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <main+0xc96>
    3274:	fe 01       	movw	r30, r28
    3276:	ef 57       	subi	r30, 0x7F	; 127
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327e:	de 01       	movw	r26, r28
    3280:	ad 57       	subi	r26, 0x7D	; 125
    3282:	bf 4f       	sbci	r27, 0xFF	; 255
    3284:	fe 01       	movw	r30, r28
    3286:	ed 57       	subi	r30, 0x7D	; 125
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	80 81       	ld	r24, Z
    328c:	91 81       	ldd	r25, Z+1	; 0x01
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	11 96       	adiw	r26, 0x01	; 1
    3292:	9c 93       	st	X, r25
    3294:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3296:	fe 01       	movw	r30, r28
    3298:	ed 57       	subi	r30, 0x7D	; 125
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	80 81       	ld	r24, Z
    329e:	91 81       	ldd	r25, Z+1	; 0x01
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	d1 f6       	brne	.-76     	; 0x3258 <main+0xc7e>
    32a4:	27 c0       	rjmp	.+78     	; 0x32f4 <main+0xd1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a6:	8e 01       	movw	r16, r28
    32a8:	0d 57       	subi	r16, 0x7D	; 125
    32aa:	1f 4f       	sbci	r17, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	eb 57       	subi	r30, 0x7B	; 123
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	f8 01       	movw	r30, r16
    32c4:	91 83       	std	Z+1, r25	; 0x01
    32c6:	80 83       	st	Z, r24
    32c8:	de 01       	movw	r26, r28
    32ca:	a1 58       	subi	r26, 0x81	; 129
    32cc:	bf 4f       	sbci	r27, 0xFF	; 255
    32ce:	fe 01       	movw	r30, r28
    32d0:	ed 57       	subi	r30, 0x7D	; 125
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	80 81       	ld	r24, Z
    32d6:	91 81       	ldd	r25, Z+1	; 0x01
    32d8:	8d 93       	st	X+, r24
    32da:	9c 93       	st	X, r25
    32dc:	fe 01       	movw	r30, r28
    32de:	e1 58       	subi	r30, 0x81	; 129
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	80 81       	ld	r24, Z
    32e4:	91 81       	ldd	r25, Z+1	; 0x01
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	f1 f7       	brne	.-4      	; 0x32e6 <main+0xd0c>
    32ea:	fe 01       	movw	r30, r28
    32ec:	e1 58       	subi	r30, 0x81	; 129
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	80 83       	st	Z, r24
    	    	             _delay_ms(200);

    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_LOW);
    32f4:	82 e0       	ldi	r24, 0x02	; 2
    32f6:	67 e0       	ldi	r22, 0x07	; 7
    32f8:	40 e0       	ldi	r20, 0x00	; 0
    32fa:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	              DIO_voidSetPortValue(DIO_PORTD,0b00000000);
    32fe:	83 e0       	ldi	r24, 0x03	; 3
    3300:	60 e0       	ldi	r22, 0x00	; 0
    3302:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    3306:	fe 01       	movw	r30, r28
    3308:	e5 58       	subi	r30, 0x85	; 133
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	a8 e4       	ldi	r26, 0x48	; 72
    3312:	b3 e4       	ldi	r27, 0x43	; 67
    3314:	80 83       	st	Z, r24
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	a2 83       	std	Z+2, r26	; 0x02
    331a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331c:	8e 01       	movw	r16, r28
    331e:	09 58       	subi	r16, 0x89	; 137
    3320:	1f 4f       	sbci	r17, 0xFF	; 255
    3322:	fe 01       	movw	r30, r28
    3324:	e5 58       	subi	r30, 0x85	; 133
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	60 81       	ld	r22, Z
    332a:	71 81       	ldd	r23, Z+1	; 0x01
    332c:	82 81       	ldd	r24, Z+2	; 0x02
    332e:	93 81       	ldd	r25, Z+3	; 0x03
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	4a ef       	ldi	r20, 0xFA	; 250
    3336:	54 e4       	ldi	r21, 0x44	; 68
    3338:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	f8 01       	movw	r30, r16
    3342:	80 83       	st	Z, r24
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	a2 83       	std	Z+2, r26	; 0x02
    3348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    334a:	fe 01       	movw	r30, r28
    334c:	e9 58       	subi	r30, 0x89	; 137
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e8       	ldi	r20, 0x80	; 128
    335e:	5f e3       	ldi	r21, 0x3F	; 63
    3360:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3364:	88 23       	and	r24, r24
    3366:	44 f4       	brge	.+16     	; 0x3378 <main+0xd9e>
		__ticks = 1;
    3368:	fe 01       	movw	r30, r28
    336a:	eb 58       	subi	r30, 0x8B	; 139
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	91 83       	std	Z+1, r25	; 0x01
    3374:	80 83       	st	Z, r24
    3376:	64 c0       	rjmp	.+200    	; 0x3440 <main+0xe66>
	else if (__tmp > 65535)
    3378:	fe 01       	movw	r30, r28
    337a:	e9 58       	subi	r30, 0x89	; 137
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	60 81       	ld	r22, Z
    3380:	71 81       	ldd	r23, Z+1	; 0x01
    3382:	82 81       	ldd	r24, Z+2	; 0x02
    3384:	93 81       	ldd	r25, Z+3	; 0x03
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	3f ef       	ldi	r19, 0xFF	; 255
    338a:	4f e7       	ldi	r20, 0x7F	; 127
    338c:	57 e4       	ldi	r21, 0x47	; 71
    338e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3392:	18 16       	cp	r1, r24
    3394:	0c f0       	brlt	.+2      	; 0x3398 <main+0xdbe>
    3396:	43 c0       	rjmp	.+134    	; 0x341e <main+0xe44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3398:	fe 01       	movw	r30, r28
    339a:	e5 58       	subi	r30, 0x85	; 133
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	60 81       	ld	r22, Z
    33a0:	71 81       	ldd	r23, Z+1	; 0x01
    33a2:	82 81       	ldd	r24, Z+2	; 0x02
    33a4:	93 81       	ldd	r25, Z+3	; 0x03
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	40 e2       	ldi	r20, 0x20	; 32
    33ac:	51 e4       	ldi	r21, 0x41	; 65
    33ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	8e 01       	movw	r16, r28
    33b8:	0b 58       	subi	r16, 0x8B	; 139
    33ba:	1f 4f       	sbci	r17, 0xFF	; 255
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	f8 01       	movw	r30, r16
    33ca:	91 83       	std	Z+1, r25	; 0x01
    33cc:	80 83       	st	Z, r24
    33ce:	1f c0       	rjmp	.+62     	; 0x340e <main+0xe34>
    33d0:	fe 01       	movw	r30, r28
    33d2:	ed 58       	subi	r30, 0x8D	; 141
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	88 ec       	ldi	r24, 0xC8	; 200
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	91 83       	std	Z+1, r25	; 0x01
    33dc:	80 83       	st	Z, r24
    33de:	fe 01       	movw	r30, r28
    33e0:	ed 58       	subi	r30, 0x8D	; 141
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <main+0xe0e>
    33ec:	fe 01       	movw	r30, r28
    33ee:	ed 58       	subi	r30, 0x8D	; 141
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f6:	de 01       	movw	r26, r28
    33f8:	ab 58       	subi	r26, 0x8B	; 139
    33fa:	bf 4f       	sbci	r27, 0xFF	; 255
    33fc:	fe 01       	movw	r30, r28
    33fe:	eb 58       	subi	r30, 0x8B	; 139
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	80 81       	ld	r24, Z
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	11 96       	adiw	r26, 0x01	; 1
    340a:	9c 93       	st	X, r25
    340c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340e:	fe 01       	movw	r30, r28
    3410:	eb 58       	subi	r30, 0x8B	; 139
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	80 81       	ld	r24, Z
    3416:	91 81       	ldd	r25, Z+1	; 0x01
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	d1 f6       	brne	.-76     	; 0x33d0 <main+0xdf6>
    341c:	b7 c9       	rjmp	.-3218   	; 0x278c <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    341e:	8e 01       	movw	r16, r28
    3420:	0b 58       	subi	r16, 0x8B	; 139
    3422:	1f 4f       	sbci	r17, 0xFF	; 255
    3424:	fe 01       	movw	r30, r28
    3426:	e9 58       	subi	r30, 0x89	; 137
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	60 81       	ld	r22, Z
    342c:	71 81       	ldd	r23, Z+1	; 0x01
    342e:	82 81       	ldd	r24, Z+2	; 0x02
    3430:	93 81       	ldd	r25, Z+3	; 0x03
    3432:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	f8 01       	movw	r30, r16
    343c:	91 83       	std	Z+1, r25	; 0x01
    343e:	80 83       	st	Z, r24
    3440:	de 01       	movw	r26, r28
    3442:	af 58       	subi	r26, 0x8F	; 143
    3444:	bf 4f       	sbci	r27, 0xFF	; 255
    3446:	fe 01       	movw	r30, r28
    3448:	eb 58       	subi	r30, 0x8B	; 139
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	80 81       	ld	r24, Z
    344e:	91 81       	ldd	r25, Z+1	; 0x01
    3450:	11 96       	adiw	r26, 0x01	; 1
    3452:	9c 93       	st	X, r25
    3454:	8e 93       	st	-X, r24
    3456:	fe 01       	movw	r30, r28
    3458:	ef 58       	subi	r30, 0x8F	; 143
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <main+0xe86>
    3464:	fe 01       	movw	r30, r28
    3466:	ef 58       	subi	r30, 0x8F	; 143
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	80 83       	st	Z, r24
    346e:	8e c9       	rjmp	.-3300   	; 0x278c <main+0x1b2>
    	    	              _delay_ms(200);
    	    	              break;

    	 case 5:
    	    	    		 CLCD_voidClearScreen();
    3470:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_HIGH);
    3474:	82 e0       	ldi	r24, 0x02	; 2
    3476:	67 e0       	ldi	r22, 0x07	; 7
    3478:	41 e0       	ldi	r20, 0x01	; 1
    347a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	             DIO_voidSetPortValue(DIO_PORTD,0b11000011);
    347e:	83 e0       	ldi	r24, 0x03	; 3
    3480:	63 ec       	ldi	r22, 0xC3	; 195
    3482:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    	    	             CLCD_voidSendExtraChar(CLCD_ROW_1,(CLCD_COL_1-1),5);
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	45 e0       	ldi	r20, 0x05	; 5
    348c:	0e 94 1f 0b 	call	0x163e	; 0x163e <CLCD_voidSendExtraChar>
    3490:	fe 01       	movw	r30, r28
    3492:	e3 59       	subi	r30, 0x93	; 147
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	aa e7       	ldi	r26, 0x7A	; 122
    349c:	b3 e4       	ldi	r27, 0x43	; 67
    349e:	80 83       	st	Z, r24
    34a0:	91 83       	std	Z+1, r25	; 0x01
    34a2:	a2 83       	std	Z+2, r26	; 0x02
    34a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a6:	8e 01       	movw	r16, r28
    34a8:	07 59       	subi	r16, 0x97	; 151
    34aa:	1f 4f       	sbci	r17, 0xFF	; 255
    34ac:	fe 01       	movw	r30, r28
    34ae:	e3 59       	subi	r30, 0x93	; 147
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	60 81       	ld	r22, Z
    34b4:	71 81       	ldd	r23, Z+1	; 0x01
    34b6:	82 81       	ldd	r24, Z+2	; 0x02
    34b8:	93 81       	ldd	r25, Z+3	; 0x03
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	4a ef       	ldi	r20, 0xFA	; 250
    34c0:	54 e4       	ldi	r21, 0x44	; 68
    34c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	f8 01       	movw	r30, r16
    34cc:	80 83       	st	Z, r24
    34ce:	91 83       	std	Z+1, r25	; 0x01
    34d0:	a2 83       	std	Z+2, r26	; 0x02
    34d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34d4:	fe 01       	movw	r30, r28
    34d6:	e7 59       	subi	r30, 0x97	; 151
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	60 81       	ld	r22, Z
    34dc:	71 81       	ldd	r23, Z+1	; 0x01
    34de:	82 81       	ldd	r24, Z+2	; 0x02
    34e0:	93 81       	ldd	r25, Z+3	; 0x03
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e8       	ldi	r20, 0x80	; 128
    34e8:	5f e3       	ldi	r21, 0x3F	; 63
    34ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34ee:	88 23       	and	r24, r24
    34f0:	44 f4       	brge	.+16     	; 0x3502 <main+0xf28>
		__ticks = 1;
    34f2:	fe 01       	movw	r30, r28
    34f4:	e9 59       	subi	r30, 0x99	; 153
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	80 83       	st	Z, r24
    3500:	64 c0       	rjmp	.+200    	; 0x35ca <main+0xff0>
	else if (__tmp > 65535)
    3502:	fe 01       	movw	r30, r28
    3504:	e7 59       	subi	r30, 0x97	; 151
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	60 81       	ld	r22, Z
    350a:	71 81       	ldd	r23, Z+1	; 0x01
    350c:	82 81       	ldd	r24, Z+2	; 0x02
    350e:	93 81       	ldd	r25, Z+3	; 0x03
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	3f ef       	ldi	r19, 0xFF	; 255
    3514:	4f e7       	ldi	r20, 0x7F	; 127
    3516:	57 e4       	ldi	r21, 0x47	; 71
    3518:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    351c:	18 16       	cp	r1, r24
    351e:	0c f0       	brlt	.+2      	; 0x3522 <main+0xf48>
    3520:	43 c0       	rjmp	.+134    	; 0x35a8 <main+0xfce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3522:	fe 01       	movw	r30, r28
    3524:	e3 59       	subi	r30, 0x93	; 147
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	60 81       	ld	r22, Z
    352a:	71 81       	ldd	r23, Z+1	; 0x01
    352c:	82 81       	ldd	r24, Z+2	; 0x02
    352e:	93 81       	ldd	r25, Z+3	; 0x03
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e2       	ldi	r20, 0x20	; 32
    3536:	51 e4       	ldi	r21, 0x41	; 65
    3538:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	8e 01       	movw	r16, r28
    3542:	09 59       	subi	r16, 0x99	; 153
    3544:	1f 4f       	sbci	r17, 0xFF	; 255
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	f8 01       	movw	r30, r16
    3554:	91 83       	std	Z+1, r25	; 0x01
    3556:	80 83       	st	Z, r24
    3558:	1f c0       	rjmp	.+62     	; 0x3598 <main+0xfbe>
    355a:	fe 01       	movw	r30, r28
    355c:	eb 59       	subi	r30, 0x9B	; 155
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	88 ec       	ldi	r24, 0xC8	; 200
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	91 83       	std	Z+1, r25	; 0x01
    3566:	80 83       	st	Z, r24
    3568:	fe 01       	movw	r30, r28
    356a:	eb 59       	subi	r30, 0x9B	; 155
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <main+0xf98>
    3576:	fe 01       	movw	r30, r28
    3578:	eb 59       	subi	r30, 0x9B	; 155
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3580:	de 01       	movw	r26, r28
    3582:	a9 59       	subi	r26, 0x99	; 153
    3584:	bf 4f       	sbci	r27, 0xFF	; 255
    3586:	fe 01       	movw	r30, r28
    3588:	e9 59       	subi	r30, 0x99	; 153
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	80 81       	ld	r24, Z
    358e:	91 81       	ldd	r25, Z+1	; 0x01
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	11 96       	adiw	r26, 0x01	; 1
    3594:	9c 93       	st	X, r25
    3596:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3598:	fe 01       	movw	r30, r28
    359a:	e9 59       	subi	r30, 0x99	; 153
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 81       	ld	r24, Z
    35a0:	91 81       	ldd	r25, Z+1	; 0x01
    35a2:	00 97       	sbiw	r24, 0x00	; 0
    35a4:	d1 f6       	brne	.-76     	; 0x355a <main+0xf80>
    35a6:	27 c0       	rjmp	.+78     	; 0x35f6 <main+0x101c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a8:	8e 01       	movw	r16, r28
    35aa:	09 59       	subi	r16, 0x99	; 153
    35ac:	1f 4f       	sbci	r17, 0xFF	; 255
    35ae:	fe 01       	movw	r30, r28
    35b0:	e7 59       	subi	r30, 0x97	; 151
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	60 81       	ld	r22, Z
    35b6:	71 81       	ldd	r23, Z+1	; 0x01
    35b8:	82 81       	ldd	r24, Z+2	; 0x02
    35ba:	93 81       	ldd	r25, Z+3	; 0x03
    35bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	f8 01       	movw	r30, r16
    35c6:	91 83       	std	Z+1, r25	; 0x01
    35c8:	80 83       	st	Z, r24
    35ca:	de 01       	movw	r26, r28
    35cc:	ad 59       	subi	r26, 0x9D	; 157
    35ce:	bf 4f       	sbci	r27, 0xFF	; 255
    35d0:	fe 01       	movw	r30, r28
    35d2:	e9 59       	subi	r30, 0x99	; 153
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	80 81       	ld	r24, Z
    35d8:	91 81       	ldd	r25, Z+1	; 0x01
    35da:	8d 93       	st	X+, r24
    35dc:	9c 93       	st	X, r25
    35de:	fe 01       	movw	r30, r28
    35e0:	ed 59       	subi	r30, 0x9D	; 157
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	80 81       	ld	r24, Z
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	01 97       	sbiw	r24, 0x01	; 1
    35ea:	f1 f7       	brne	.-4      	; 0x35e8 <main+0x100e>
    35ec:	fe 01       	movw	r30, r28
    35ee:	ed 59       	subi	r30, 0x9D	; 157
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	80 83       	st	Z, r24
    	    	             _delay_ms(250);

    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_LOW);
    35f6:	82 e0       	ldi	r24, 0x02	; 2
    35f8:	67 e0       	ldi	r22, 0x07	; 7
    35fa:	40 e0       	ldi	r20, 0x00	; 0
    35fc:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	              DIO_voidSetPortValue(DIO_PORTD,0b00000000);
    3600:	83 e0       	ldi	r24, 0x03	; 3
    3602:	60 e0       	ldi	r22, 0x00	; 0
    3604:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    3608:	fe 01       	movw	r30, r28
    360a:	e1 5a       	subi	r30, 0xA1	; 161
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 e0       	ldi	r24, 0x00	; 0
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	aa e7       	ldi	r26, 0x7A	; 122
    3614:	b3 e4       	ldi	r27, 0x43	; 67
    3616:	80 83       	st	Z, r24
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	a2 83       	std	Z+2, r26	; 0x02
    361c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361e:	8e 01       	movw	r16, r28
    3620:	05 5a       	subi	r16, 0xA5	; 165
    3622:	1f 4f       	sbci	r17, 0xFF	; 255
    3624:	fe 01       	movw	r30, r28
    3626:	e1 5a       	subi	r30, 0xA1	; 161
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	4a ef       	ldi	r20, 0xFA	; 250
    3638:	54 e4       	ldi	r21, 0x44	; 68
    363a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	f8 01       	movw	r30, r16
    3644:	80 83       	st	Z, r24
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	a2 83       	std	Z+2, r26	; 0x02
    364a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    364c:	fe 01       	movw	r30, r28
    364e:	e5 5a       	subi	r30, 0xA5	; 165
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	60 81       	ld	r22, Z
    3654:	71 81       	ldd	r23, Z+1	; 0x01
    3656:	82 81       	ldd	r24, Z+2	; 0x02
    3658:	93 81       	ldd	r25, Z+3	; 0x03
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	40 e8       	ldi	r20, 0x80	; 128
    3660:	5f e3       	ldi	r21, 0x3F	; 63
    3662:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3666:	88 23       	and	r24, r24
    3668:	44 f4       	brge	.+16     	; 0x367a <main+0x10a0>
		__ticks = 1;
    366a:	fe 01       	movw	r30, r28
    366c:	e7 5a       	subi	r30, 0xA7	; 167
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	91 83       	std	Z+1, r25	; 0x01
    3676:	80 83       	st	Z, r24
    3678:	65 c0       	rjmp	.+202    	; 0x3744 <main+0x116a>
	else if (__tmp > 65535)
    367a:	fe 01       	movw	r30, r28
    367c:	e5 5a       	subi	r30, 0xA5	; 165
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	60 81       	ld	r22, Z
    3682:	71 81       	ldd	r23, Z+1	; 0x01
    3684:	82 81       	ldd	r24, Z+2	; 0x02
    3686:	93 81       	ldd	r25, Z+3	; 0x03
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	3f ef       	ldi	r19, 0xFF	; 255
    368c:	4f e7       	ldi	r20, 0x7F	; 127
    368e:	57 e4       	ldi	r21, 0x47	; 71
    3690:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3694:	18 16       	cp	r1, r24
    3696:	0c f0       	brlt	.+2      	; 0x369a <main+0x10c0>
    3698:	44 c0       	rjmp	.+136    	; 0x3722 <main+0x1148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    369a:	fe 01       	movw	r30, r28
    369c:	e1 5a       	subi	r30, 0xA1	; 161
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 e2       	ldi	r20, 0x20	; 32
    36ae:	51 e4       	ldi	r21, 0x41	; 65
    36b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	8e 01       	movw	r16, r28
    36ba:	07 5a       	subi	r16, 0xA7	; 167
    36bc:	1f 4f       	sbci	r17, 0xFF	; 255
    36be:	bc 01       	movw	r22, r24
    36c0:	cd 01       	movw	r24, r26
    36c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	f8 01       	movw	r30, r16
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
    36d0:	1f c0       	rjmp	.+62     	; 0x3710 <main+0x1136>
    36d2:	fe 01       	movw	r30, r28
    36d4:	e9 5a       	subi	r30, 0xA9	; 169
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	88 ec       	ldi	r24, 0xC8	; 200
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	91 83       	std	Z+1, r25	; 0x01
    36de:	80 83       	st	Z, r24
    36e0:	fe 01       	movw	r30, r28
    36e2:	e9 5a       	subi	r30, 0xA9	; 169
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 81       	ld	r24, Z
    36e8:	91 81       	ldd	r25, Z+1	; 0x01
    36ea:	01 97       	sbiw	r24, 0x01	; 1
    36ec:	f1 f7       	brne	.-4      	; 0x36ea <main+0x1110>
    36ee:	fe 01       	movw	r30, r28
    36f0:	e9 5a       	subi	r30, 0xA9	; 169
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	91 83       	std	Z+1, r25	; 0x01
    36f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f8:	de 01       	movw	r26, r28
    36fa:	a7 5a       	subi	r26, 0xA7	; 167
    36fc:	bf 4f       	sbci	r27, 0xFF	; 255
    36fe:	fe 01       	movw	r30, r28
    3700:	e7 5a       	subi	r30, 0xA7	; 167
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	80 81       	ld	r24, Z
    3706:	91 81       	ldd	r25, Z+1	; 0x01
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	11 96       	adiw	r26, 0x01	; 1
    370c:	9c 93       	st	X, r25
    370e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3710:	fe 01       	movw	r30, r28
    3712:	e7 5a       	subi	r30, 0xA7	; 167
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	d1 f6       	brne	.-76     	; 0x36d2 <main+0x10f8>
    371e:	0c 94 c6 13 	jmp	0x278c	; 0x278c <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3722:	8e 01       	movw	r16, r28
    3724:	07 5a       	subi	r16, 0xA7	; 167
    3726:	1f 4f       	sbci	r17, 0xFF	; 255
    3728:	fe 01       	movw	r30, r28
    372a:	e5 5a       	subi	r30, 0xA5	; 165
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	60 81       	ld	r22, Z
    3730:	71 81       	ldd	r23, Z+1	; 0x01
    3732:	82 81       	ldd	r24, Z+2	; 0x02
    3734:	93 81       	ldd	r25, Z+3	; 0x03
    3736:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	f8 01       	movw	r30, r16
    3740:	91 83       	std	Z+1, r25	; 0x01
    3742:	80 83       	st	Z, r24
    3744:	de 01       	movw	r26, r28
    3746:	ab 5a       	subi	r26, 0xAB	; 171
    3748:	bf 4f       	sbci	r27, 0xFF	; 255
    374a:	fe 01       	movw	r30, r28
    374c:	e7 5a       	subi	r30, 0xA7	; 167
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 81       	ld	r24, Z
    3752:	91 81       	ldd	r25, Z+1	; 0x01
    3754:	11 96       	adiw	r26, 0x01	; 1
    3756:	9c 93       	st	X, r25
    3758:	8e 93       	st	-X, r24
    375a:	fe 01       	movw	r30, r28
    375c:	eb 5a       	subi	r30, 0xAB	; 171
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	80 81       	ld	r24, Z
    3762:	91 81       	ldd	r25, Z+1	; 0x01
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	f1 f7       	brne	.-4      	; 0x3764 <main+0x118a>
    3768:	fe 01       	movw	r30, r28
    376a:	eb 5a       	subi	r30, 0xAB	; 171
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	80 83       	st	Z, r24
    3772:	0c 94 c6 13 	jmp	0x278c	; 0x278c <main+0x1b2>
    	    	              _delay_ms(250);
    	    	              break;

    	 case 6:
    	    	    		 CLCD_voidClearScreen();
    3776:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_HIGH);
    377a:	82 e0       	ldi	r24, 0x02	; 2
    377c:	67 e0       	ldi	r22, 0x07	; 7
    377e:	41 e0       	ldi	r20, 0x01	; 1
    3780:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	             DIO_voidSetPortValue(DIO_PORTD,0b00111100);
    3784:	83 e0       	ldi	r24, 0x03	; 3
    3786:	6c e3       	ldi	r22, 0x3C	; 60
    3788:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    	    	             CLCD_voidSendExtraChar(CLCD_ROW_1,(CLCD_COL_1-1),6);
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	60 e0       	ldi	r22, 0x00	; 0
    3790:	46 e0       	ldi	r20, 0x06	; 6
    3792:	0e 94 1f 0b 	call	0x163e	; 0x163e <CLCD_voidSendExtraChar>
    3796:	fe 01       	movw	r30, r28
    3798:	ef 5a       	subi	r30, 0xAF	; 175
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	a6 e9       	ldi	r26, 0x96	; 150
    37a2:	b3 e4       	ldi	r27, 0x43	; 67
    37a4:	80 83       	st	Z, r24
    37a6:	91 83       	std	Z+1, r25	; 0x01
    37a8:	a2 83       	std	Z+2, r26	; 0x02
    37aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ac:	8e 01       	movw	r16, r28
    37ae:	03 5b       	subi	r16, 0xB3	; 179
    37b0:	1f 4f       	sbci	r17, 0xFF	; 255
    37b2:	fe 01       	movw	r30, r28
    37b4:	ef 5a       	subi	r30, 0xAF	; 175
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	60 81       	ld	r22, Z
    37ba:	71 81       	ldd	r23, Z+1	; 0x01
    37bc:	82 81       	ldd	r24, Z+2	; 0x02
    37be:	93 81       	ldd	r25, Z+3	; 0x03
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	4a ef       	ldi	r20, 0xFA	; 250
    37c6:	54 e4       	ldi	r21, 0x44	; 68
    37c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	f8 01       	movw	r30, r16
    37d2:	80 83       	st	Z, r24
    37d4:	91 83       	std	Z+1, r25	; 0x01
    37d6:	a2 83       	std	Z+2, r26	; 0x02
    37d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37da:	fe 01       	movw	r30, r28
    37dc:	e3 5b       	subi	r30, 0xB3	; 179
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	60 81       	ld	r22, Z
    37e2:	71 81       	ldd	r23, Z+1	; 0x01
    37e4:	82 81       	ldd	r24, Z+2	; 0x02
    37e6:	93 81       	ldd	r25, Z+3	; 0x03
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	40 e8       	ldi	r20, 0x80	; 128
    37ee:	5f e3       	ldi	r21, 0x3F	; 63
    37f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    37f4:	88 23       	and	r24, r24
    37f6:	44 f4       	brge	.+16     	; 0x3808 <main+0x122e>
		__ticks = 1;
    37f8:	fe 01       	movw	r30, r28
    37fa:	e5 5b       	subi	r30, 0xB5	; 181
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	91 83       	std	Z+1, r25	; 0x01
    3804:	80 83       	st	Z, r24
    3806:	64 c0       	rjmp	.+200    	; 0x38d0 <main+0x12f6>
	else if (__tmp > 65535)
    3808:	fe 01       	movw	r30, r28
    380a:	e3 5b       	subi	r30, 0xB3	; 179
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	60 81       	ld	r22, Z
    3810:	71 81       	ldd	r23, Z+1	; 0x01
    3812:	82 81       	ldd	r24, Z+2	; 0x02
    3814:	93 81       	ldd	r25, Z+3	; 0x03
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	3f ef       	ldi	r19, 0xFF	; 255
    381a:	4f e7       	ldi	r20, 0x7F	; 127
    381c:	57 e4       	ldi	r21, 0x47	; 71
    381e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3822:	18 16       	cp	r1, r24
    3824:	0c f0       	brlt	.+2      	; 0x3828 <main+0x124e>
    3826:	43 c0       	rjmp	.+134    	; 0x38ae <main+0x12d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3828:	fe 01       	movw	r30, r28
    382a:	ef 5a       	subi	r30, 0xAF	; 175
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	60 81       	ld	r22, Z
    3830:	71 81       	ldd	r23, Z+1	; 0x01
    3832:	82 81       	ldd	r24, Z+2	; 0x02
    3834:	93 81       	ldd	r25, Z+3	; 0x03
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	40 e2       	ldi	r20, 0x20	; 32
    383c:	51 e4       	ldi	r21, 0x41	; 65
    383e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	8e 01       	movw	r16, r28
    3848:	05 5b       	subi	r16, 0xB5	; 181
    384a:	1f 4f       	sbci	r17, 0xFF	; 255
    384c:	bc 01       	movw	r22, r24
    384e:	cd 01       	movw	r24, r26
    3850:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	f8 01       	movw	r30, r16
    385a:	91 83       	std	Z+1, r25	; 0x01
    385c:	80 83       	st	Z, r24
    385e:	1f c0       	rjmp	.+62     	; 0x389e <main+0x12c4>
    3860:	fe 01       	movw	r30, r28
    3862:	e7 5b       	subi	r30, 0xB7	; 183
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	88 ec       	ldi	r24, 0xC8	; 200
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	80 83       	st	Z, r24
    386e:	fe 01       	movw	r30, r28
    3870:	e7 5b       	subi	r30, 0xB7	; 183
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <main+0x129e>
    387c:	fe 01       	movw	r30, r28
    387e:	e7 5b       	subi	r30, 0xB7	; 183
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3886:	de 01       	movw	r26, r28
    3888:	a5 5b       	subi	r26, 0xB5	; 181
    388a:	bf 4f       	sbci	r27, 0xFF	; 255
    388c:	fe 01       	movw	r30, r28
    388e:	e5 5b       	subi	r30, 0xB5	; 181
    3890:	ff 4f       	sbci	r31, 0xFF	; 255
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	11 96       	adiw	r26, 0x01	; 1
    389a:	9c 93       	st	X, r25
    389c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    389e:	fe 01       	movw	r30, r28
    38a0:	e5 5b       	subi	r30, 0xB5	; 181
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	00 97       	sbiw	r24, 0x00	; 0
    38aa:	d1 f6       	brne	.-76     	; 0x3860 <main+0x1286>
    38ac:	27 c0       	rjmp	.+78     	; 0x38fc <main+0x1322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ae:	8e 01       	movw	r16, r28
    38b0:	05 5b       	subi	r16, 0xB5	; 181
    38b2:	1f 4f       	sbci	r17, 0xFF	; 255
    38b4:	fe 01       	movw	r30, r28
    38b6:	e3 5b       	subi	r30, 0xB3	; 179
    38b8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ba:	60 81       	ld	r22, Z
    38bc:	71 81       	ldd	r23, Z+1	; 0x01
    38be:	82 81       	ldd	r24, Z+2	; 0x02
    38c0:	93 81       	ldd	r25, Z+3	; 0x03
    38c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	f8 01       	movw	r30, r16
    38cc:	91 83       	std	Z+1, r25	; 0x01
    38ce:	80 83       	st	Z, r24
    38d0:	de 01       	movw	r26, r28
    38d2:	a9 5b       	subi	r26, 0xB9	; 185
    38d4:	bf 4f       	sbci	r27, 0xFF	; 255
    38d6:	fe 01       	movw	r30, r28
    38d8:	e5 5b       	subi	r30, 0xB5	; 181
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	80 81       	ld	r24, Z
    38de:	91 81       	ldd	r25, Z+1	; 0x01
    38e0:	8d 93       	st	X+, r24
    38e2:	9c 93       	st	X, r25
    38e4:	fe 01       	movw	r30, r28
    38e6:	e9 5b       	subi	r30, 0xB9	; 185
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	80 81       	ld	r24, Z
    38ec:	91 81       	ldd	r25, Z+1	; 0x01
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	f1 f7       	brne	.-4      	; 0x38ee <main+0x1314>
    38f2:	fe 01       	movw	r30, r28
    38f4:	e9 5b       	subi	r30, 0xB9	; 185
    38f6:	ff 4f       	sbci	r31, 0xFF	; 255
    38f8:	91 83       	std	Z+1, r25	; 0x01
    38fa:	80 83       	st	Z, r24
    	    	             _delay_ms(300);

    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_LOW);
    38fc:	82 e0       	ldi	r24, 0x02	; 2
    38fe:	67 e0       	ldi	r22, 0x07	; 7
    3900:	40 e0       	ldi	r20, 0x00	; 0
    3902:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	              DIO_voidSetPortValue(DIO_PORTD,0b00000000);
    3906:	83 e0       	ldi	r24, 0x03	; 3
    3908:	60 e0       	ldi	r22, 0x00	; 0
    390a:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    390e:	fe 01       	movw	r30, r28
    3910:	ed 5b       	subi	r30, 0xBD	; 189
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	a6 e9       	ldi	r26, 0x96	; 150
    391a:	b3 e4       	ldi	r27, 0x43	; 67
    391c:	80 83       	st	Z, r24
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	a2 83       	std	Z+2, r26	; 0x02
    3922:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3924:	8e 01       	movw	r16, r28
    3926:	01 5c       	subi	r16, 0xC1	; 193
    3928:	1f 4f       	sbci	r17, 0xFF	; 255
    392a:	fe 01       	movw	r30, r28
    392c:	ed 5b       	subi	r30, 0xBD	; 189
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	60 81       	ld	r22, Z
    3932:	71 81       	ldd	r23, Z+1	; 0x01
    3934:	82 81       	ldd	r24, Z+2	; 0x02
    3936:	93 81       	ldd	r25, Z+3	; 0x03
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	4a ef       	ldi	r20, 0xFA	; 250
    393e:	54 e4       	ldi	r21, 0x44	; 68
    3940:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	f8 01       	movw	r30, r16
    394a:	80 83       	st	Z, r24
    394c:	91 83       	std	Z+1, r25	; 0x01
    394e:	a2 83       	std	Z+2, r26	; 0x02
    3950:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3952:	fe 01       	movw	r30, r28
    3954:	ff 96       	adiw	r30, 0x3f	; 63
    3956:	60 81       	ld	r22, Z
    3958:	71 81       	ldd	r23, Z+1	; 0x01
    395a:	82 81       	ldd	r24, Z+2	; 0x02
    395c:	93 81       	ldd	r25, Z+3	; 0x03
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e8       	ldi	r20, 0x80	; 128
    3964:	5f e3       	ldi	r21, 0x3F	; 63
    3966:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    396a:	88 23       	and	r24, r24
    396c:	2c f4       	brge	.+10     	; 0x3978 <main+0x139e>
		__ticks = 1;
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	9e af       	std	Y+62, r25	; 0x3e
    3974:	8d af       	std	Y+61, r24	; 0x3d
    3976:	47 c0       	rjmp	.+142    	; 0x3a06 <main+0x142c>
	else if (__tmp > 65535)
    3978:	fe 01       	movw	r30, r28
    397a:	ff 96       	adiw	r30, 0x3f	; 63
    397c:	60 81       	ld	r22, Z
    397e:	71 81       	ldd	r23, Z+1	; 0x01
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	93 81       	ldd	r25, Z+3	; 0x03
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	3f ef       	ldi	r19, 0xFF	; 255
    3988:	4f e7       	ldi	r20, 0x7F	; 127
    398a:	57 e4       	ldi	r21, 0x47	; 71
    398c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3990:	18 16       	cp	r1, r24
    3992:	6c f5       	brge	.+90     	; 0x39ee <main+0x1414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3994:	fe 01       	movw	r30, r28
    3996:	ed 5b       	subi	r30, 0xBD	; 189
    3998:	ff 4f       	sbci	r31, 0xFF	; 255
    399a:	60 81       	ld	r22, Z
    399c:	71 81       	ldd	r23, Z+1	; 0x01
    399e:	82 81       	ldd	r24, Z+2	; 0x02
    39a0:	93 81       	ldd	r25, Z+3	; 0x03
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	40 e2       	ldi	r20, 0x20	; 32
    39a8:	51 e4       	ldi	r21, 0x41	; 65
    39aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	9e af       	std	Y+62, r25	; 0x3e
    39c0:	8d af       	std	Y+61, r24	; 0x3d
    39c2:	0f c0       	rjmp	.+30     	; 0x39e2 <main+0x1408>
    39c4:	88 ec       	ldi	r24, 0xC8	; 200
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	9c af       	std	Y+60, r25	; 0x3c
    39ca:	8b af       	std	Y+59, r24	; 0x3b
    39cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    39ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	f1 f7       	brne	.-4      	; 0x39d0 <main+0x13f6>
    39d4:	9c af       	std	Y+60, r25	; 0x3c
    39d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    39da:	9e ad       	ldd	r25, Y+62	; 0x3e
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	9e af       	std	Y+62, r25	; 0x3e
    39e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    39e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	69 f7       	brne	.-38     	; 0x39c4 <main+0x13ea>
    39ea:	0c 94 c6 13 	jmp	0x278c	; 0x278c <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ee:	fe 01       	movw	r30, r28
    39f0:	ff 96       	adiw	r30, 0x3f	; 63
    39f2:	60 81       	ld	r22, Z
    39f4:	71 81       	ldd	r23, Z+1	; 0x01
    39f6:	82 81       	ldd	r24, Z+2	; 0x02
    39f8:	93 81       	ldd	r25, Z+3	; 0x03
    39fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	9e af       	std	Y+62, r25	; 0x3e
    3a04:	8d af       	std	Y+61, r24	; 0x3d
    3a06:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a08:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a0a:	9a af       	std	Y+58, r25	; 0x3a
    3a0c:	89 af       	std	Y+57, r24	; 0x39
    3a0e:	89 ad       	ldd	r24, Y+57	; 0x39
    3a10:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a12:	01 97       	sbiw	r24, 0x01	; 1
    3a14:	f1 f7       	brne	.-4      	; 0x3a12 <main+0x1438>
    3a16:	9a af       	std	Y+58, r25	; 0x3a
    3a18:	89 af       	std	Y+57, r24	; 0x39
    3a1a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <main+0x1b2>
    	    	              _delay_ms(300);
    	    	              break;
    	 case 7:
    	    	    		 CLCD_voidClearScreen();
    3a1e:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_HIGH);
    3a22:	82 e0       	ldi	r24, 0x02	; 2
    3a24:	67 e0       	ldi	r22, 0x07	; 7
    3a26:	41 e0       	ldi	r20, 0x01	; 1
    3a28:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	             DIO_voidSetPortValue(DIO_PORTD,0b10010010);
    3a2c:	83 e0       	ldi	r24, 0x03	; 3
    3a2e:	62 e9       	ldi	r22, 0x92	; 146
    3a30:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    	    	             CLCD_voidSendExtraChar(CLCD_ROW_1,(CLCD_COL_1-1),7);
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	60 e0       	ldi	r22, 0x00	; 0
    3a38:	47 e0       	ldi	r20, 0x07	; 7
    3a3a:	0e 94 1f 0b 	call	0x163e	; 0x163e <CLCD_voidSendExtraChar>
    3a3e:	80 e0       	ldi	r24, 0x00	; 0
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	af ea       	ldi	r26, 0xAF	; 175
    3a44:	b3 e4       	ldi	r27, 0x43	; 67
    3a46:	8d ab       	std	Y+53, r24	; 0x35
    3a48:	9e ab       	std	Y+54, r25	; 0x36
    3a4a:	af ab       	std	Y+55, r26	; 0x37
    3a4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a4e:	6d a9       	ldd	r22, Y+53	; 0x35
    3a50:	7e a9       	ldd	r23, Y+54	; 0x36
    3a52:	8f a9       	ldd	r24, Y+55	; 0x37
    3a54:	98 ad       	ldd	r25, Y+56	; 0x38
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	4a ef       	ldi	r20, 0xFA	; 250
    3a5c:	54 e4       	ldi	r21, 0x44	; 68
    3a5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	89 ab       	std	Y+49, r24	; 0x31
    3a68:	9a ab       	std	Y+50, r25	; 0x32
    3a6a:	ab ab       	std	Y+51, r26	; 0x33
    3a6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    3a70:	7a a9       	ldd	r23, Y+50	; 0x32
    3a72:	8b a9       	ldd	r24, Y+51	; 0x33
    3a74:	9c a9       	ldd	r25, Y+52	; 0x34
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e8       	ldi	r20, 0x80	; 128
    3a7c:	5f e3       	ldi	r21, 0x3F	; 63
    3a7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a82:	88 23       	and	r24, r24
    3a84:	2c f4       	brge	.+10     	; 0x3a90 <main+0x14b6>
		__ticks = 1;
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	98 ab       	std	Y+48, r25	; 0x30
    3a8c:	8f a7       	std	Y+47, r24	; 0x2f
    3a8e:	3f c0       	rjmp	.+126    	; 0x3b0e <main+0x1534>
	else if (__tmp > 65535)
    3a90:	69 a9       	ldd	r22, Y+49	; 0x31
    3a92:	7a a9       	ldd	r23, Y+50	; 0x32
    3a94:	8b a9       	ldd	r24, Y+51	; 0x33
    3a96:	9c a9       	ldd	r25, Y+52	; 0x34
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	3f ef       	ldi	r19, 0xFF	; 255
    3a9c:	4f e7       	ldi	r20, 0x7F	; 127
    3a9e:	57 e4       	ldi	r21, 0x47	; 71
    3aa0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3aa4:	18 16       	cp	r1, r24
    3aa6:	4c f5       	brge	.+82     	; 0x3afa <main+0x1520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa8:	6d a9       	ldd	r22, Y+53	; 0x35
    3aaa:	7e a9       	ldd	r23, Y+54	; 0x36
    3aac:	8f a9       	ldd	r24, Y+55	; 0x37
    3aae:	98 ad       	ldd	r25, Y+56	; 0x38
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	40 e2       	ldi	r20, 0x20	; 32
    3ab6:	51 e4       	ldi	r21, 0x41	; 65
    3ab8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	bc 01       	movw	r22, r24
    3ac2:	cd 01       	movw	r24, r26
    3ac4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	cb 01       	movw	r24, r22
    3acc:	98 ab       	std	Y+48, r25	; 0x30
    3ace:	8f a7       	std	Y+47, r24	; 0x2f
    3ad0:	0f c0       	rjmp	.+30     	; 0x3af0 <main+0x1516>
    3ad2:	88 ec       	ldi	r24, 0xC8	; 200
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	9e a7       	std	Y+46, r25	; 0x2e
    3ad8:	8d a7       	std	Y+45, r24	; 0x2d
    3ada:	8d a5       	ldd	r24, Y+45	; 0x2d
    3adc:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ade:	01 97       	sbiw	r24, 0x01	; 1
    3ae0:	f1 f7       	brne	.-4      	; 0x3ade <main+0x1504>
    3ae2:	9e a7       	std	Y+46, r25	; 0x2e
    3ae4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	98 ab       	std	Y+48, r25	; 0x30
    3aee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3af2:	98 a9       	ldd	r25, Y+48	; 0x30
    3af4:	00 97       	sbiw	r24, 0x00	; 0
    3af6:	69 f7       	brne	.-38     	; 0x3ad2 <main+0x14f8>
    3af8:	14 c0       	rjmp	.+40     	; 0x3b22 <main+0x1548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afa:	69 a9       	ldd	r22, Y+49	; 0x31
    3afc:	7a a9       	ldd	r23, Y+50	; 0x32
    3afe:	8b a9       	ldd	r24, Y+51	; 0x33
    3b00:	9c a9       	ldd	r25, Y+52	; 0x34
    3b02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	98 ab       	std	Y+48, r25	; 0x30
    3b0c:	8f a7       	std	Y+47, r24	; 0x2f
    3b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b10:	98 a9       	ldd	r25, Y+48	; 0x30
    3b12:	9c a7       	std	Y+44, r25	; 0x2c
    3b14:	8b a7       	std	Y+43, r24	; 0x2b
    3b16:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b18:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b1a:	01 97       	sbiw	r24, 0x01	; 1
    3b1c:	f1 f7       	brne	.-4      	; 0x3b1a <main+0x1540>
    3b1e:	9c a7       	std	Y+44, r25	; 0x2c
    3b20:	8b a7       	std	Y+43, r24	; 0x2b
    	    	             _delay_ms(350);

    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_LOW);
    3b22:	82 e0       	ldi	r24, 0x02	; 2
    3b24:	67 e0       	ldi	r22, 0x07	; 7
    3b26:	40 e0       	ldi	r20, 0x00	; 0
    3b28:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	              DIO_voidSetPortValue(DIO_PORTD,0b00000000);
    3b2c:	83 e0       	ldi	r24, 0x03	; 3
    3b2e:	60 e0       	ldi	r22, 0x00	; 0
    3b30:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	af ea       	ldi	r26, 0xAF	; 175
    3b3a:	b3 e4       	ldi	r27, 0x43	; 67
    3b3c:	8f a3       	std	Y+39, r24	; 0x27
    3b3e:	98 a7       	std	Y+40, r25	; 0x28
    3b40:	a9 a7       	std	Y+41, r26	; 0x29
    3b42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b44:	6f a1       	ldd	r22, Y+39	; 0x27
    3b46:	78 a5       	ldd	r23, Y+40	; 0x28
    3b48:	89 a5       	ldd	r24, Y+41	; 0x29
    3b4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	4a ef       	ldi	r20, 0xFA	; 250
    3b52:	54 e4       	ldi	r21, 0x44	; 68
    3b54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b58:	dc 01       	movw	r26, r24
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	8b a3       	std	Y+35, r24	; 0x23
    3b5e:	9c a3       	std	Y+36, r25	; 0x24
    3b60:	ad a3       	std	Y+37, r26	; 0x25
    3b62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b64:	6b a1       	ldd	r22, Y+35	; 0x23
    3b66:	7c a1       	ldd	r23, Y+36	; 0x24
    3b68:	8d a1       	ldd	r24, Y+37	; 0x25
    3b6a:	9e a1       	ldd	r25, Y+38	; 0x26
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e8       	ldi	r20, 0x80	; 128
    3b72:	5f e3       	ldi	r21, 0x3F	; 63
    3b74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3b78:	88 23       	and	r24, r24
    3b7a:	2c f4       	brge	.+10     	; 0x3b86 <main+0x15ac>
		__ticks = 1;
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	9a a3       	std	Y+34, r25	; 0x22
    3b82:	89 a3       	std	Y+33, r24	; 0x21
    3b84:	40 c0       	rjmp	.+128    	; 0x3c06 <main+0x162c>
	else if (__tmp > 65535)
    3b86:	6b a1       	ldd	r22, Y+35	; 0x23
    3b88:	7c a1       	ldd	r23, Y+36	; 0x24
    3b8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b8c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	3f ef       	ldi	r19, 0xFF	; 255
    3b92:	4f e7       	ldi	r20, 0x7F	; 127
    3b94:	57 e4       	ldi	r21, 0x47	; 71
    3b96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3b9a:	18 16       	cp	r1, r24
    3b9c:	54 f5       	brge	.+84     	; 0x3bf2 <main+0x1618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b9e:	6f a1       	ldd	r22, Y+39	; 0x27
    3ba0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ba2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ba4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	40 e2       	ldi	r20, 0x20	; 32
    3bac:	51 e4       	ldi	r21, 0x41	; 65
    3bae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	bc 01       	movw	r22, r24
    3bb8:	cd 01       	movw	r24, r26
    3bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	9a a3       	std	Y+34, r25	; 0x22
    3bc4:	89 a3       	std	Y+33, r24	; 0x21
    3bc6:	0f c0       	rjmp	.+30     	; 0x3be6 <main+0x160c>
    3bc8:	88 ec       	ldi	r24, 0xC8	; 200
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	98 a3       	std	Y+32, r25	; 0x20
    3bce:	8f 8f       	std	Y+31, r24	; 0x1f
    3bd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bd2:	98 a1       	ldd	r25, Y+32	; 0x20
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	f1 f7       	brne	.-4      	; 0x3bd4 <main+0x15fa>
    3bd8:	98 a3       	std	Y+32, r25	; 0x20
    3bda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bdc:	89 a1       	ldd	r24, Y+33	; 0x21
    3bde:	9a a1       	ldd	r25, Y+34	; 0x22
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	9a a3       	std	Y+34, r25	; 0x22
    3be4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be6:	89 a1       	ldd	r24, Y+33	; 0x21
    3be8:	9a a1       	ldd	r25, Y+34	; 0x22
    3bea:	00 97       	sbiw	r24, 0x00	; 0
    3bec:	69 f7       	brne	.-38     	; 0x3bc8 <main+0x15ee>
    3bee:	0c 94 c6 13 	jmp	0x278c	; 0x278c <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    3bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    3bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    3bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    3bfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	9a a3       	std	Y+34, r25	; 0x22
    3c04:	89 a3       	std	Y+33, r24	; 0x21
    3c06:	89 a1       	ldd	r24, Y+33	; 0x21
    3c08:	9a a1       	ldd	r25, Y+34	; 0x22
    3c0a:	9e 8f       	std	Y+30, r25	; 0x1e
    3c0c:	8d 8f       	std	Y+29, r24	; 0x1d
    3c0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	f1 f7       	brne	.-4      	; 0x3c12 <main+0x1638>
    3c16:	9e 8f       	std	Y+30, r25	; 0x1e
    3c18:	8d 8f       	std	Y+29, r24	; 0x1d
    3c1a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <main+0x1b2>
    	    	              _delay_ms(350);
    	    	              break;

    	 case 8:
    	    	    		 CLCD_voidClearScreen();
    3c1e:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_HIGH);
    3c22:	82 e0       	ldi	r24, 0x02	; 2
    3c24:	67 e0       	ldi	r22, 0x07	; 7
    3c26:	41 e0       	ldi	r20, 0x01	; 1
    3c28:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	             DIO_voidSetPortValue(DIO_PORTD,0b01001001);
    3c2c:	83 e0       	ldi	r24, 0x03	; 3
    3c2e:	69 e4       	ldi	r22, 0x49	; 73
    3c30:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    	    	             CLCD_voidSendExtraChar(CLCD_ROW_1,(CLCD_COL_1-1),8);
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	60 e0       	ldi	r22, 0x00	; 0
    3c38:	48 e0       	ldi	r20, 0x08	; 8
    3c3a:	0e 94 1f 0b 	call	0x163e	; 0x163e <CLCD_voidSendExtraChar>
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	a8 ec       	ldi	r26, 0xC8	; 200
    3c44:	b3 e4       	ldi	r27, 0x43	; 67
    3c46:	89 8f       	std	Y+25, r24	; 0x19
    3c48:	9a 8f       	std	Y+26, r25	; 0x1a
    3c4a:	ab 8f       	std	Y+27, r26	; 0x1b
    3c4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c4e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	4a ef       	ldi	r20, 0xFA	; 250
    3c5c:	54 e4       	ldi	r21, 0x44	; 68
    3c5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	8d 8b       	std	Y+21, r24	; 0x15
    3c68:	9e 8b       	std	Y+22, r25	; 0x16
    3c6a:	af 8b       	std	Y+23, r26	; 0x17
    3c6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c70:	7e 89       	ldd	r23, Y+22	; 0x16
    3c72:	8f 89       	ldd	r24, Y+23	; 0x17
    3c74:	98 8d       	ldd	r25, Y+24	; 0x18
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	40 e8       	ldi	r20, 0x80	; 128
    3c7c:	5f e3       	ldi	r21, 0x3F	; 63
    3c7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3c82:	88 23       	and	r24, r24
    3c84:	2c f4       	brge	.+10     	; 0x3c90 <main+0x16b6>
		__ticks = 1;
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	9c 8b       	std	Y+20, r25	; 0x14
    3c8c:	8b 8b       	std	Y+19, r24	; 0x13
    3c8e:	3f c0       	rjmp	.+126    	; 0x3d0e <main+0x1734>
	else if (__tmp > 65535)
    3c90:	6d 89       	ldd	r22, Y+21	; 0x15
    3c92:	7e 89       	ldd	r23, Y+22	; 0x16
    3c94:	8f 89       	ldd	r24, Y+23	; 0x17
    3c96:	98 8d       	ldd	r25, Y+24	; 0x18
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	3f ef       	ldi	r19, 0xFF	; 255
    3c9c:	4f e7       	ldi	r20, 0x7F	; 127
    3c9e:	57 e4       	ldi	r21, 0x47	; 71
    3ca0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3ca4:	18 16       	cp	r1, r24
    3ca6:	4c f5       	brge	.+82     	; 0x3cfa <main+0x1720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca8:	69 8d       	ldd	r22, Y+25	; 0x19
    3caa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e2       	ldi	r20, 0x20	; 32
    3cb6:	51 e4       	ldi	r21, 0x41	; 65
    3cb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	bc 01       	movw	r22, r24
    3cc2:	cd 01       	movw	r24, r26
    3cc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cc8:	dc 01       	movw	r26, r24
    3cca:	cb 01       	movw	r24, r22
    3ccc:	9c 8b       	std	Y+20, r25	; 0x14
    3cce:	8b 8b       	std	Y+19, r24	; 0x13
    3cd0:	0f c0       	rjmp	.+30     	; 0x3cf0 <main+0x1716>
    3cd2:	88 ec       	ldi	r24, 0xC8	; 200
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	9a 8b       	std	Y+18, r25	; 0x12
    3cd8:	89 8b       	std	Y+17, r24	; 0x11
    3cda:	89 89       	ldd	r24, Y+17	; 0x11
    3cdc:	9a 89       	ldd	r25, Y+18	; 0x12
    3cde:	01 97       	sbiw	r24, 0x01	; 1
    3ce0:	f1 f7       	brne	.-4      	; 0x3cde <main+0x1704>
    3ce2:	9a 8b       	std	Y+18, r25	; 0x12
    3ce4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	9c 8b       	std	Y+20, r25	; 0x14
    3cee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf4:	00 97       	sbiw	r24, 0x00	; 0
    3cf6:	69 f7       	brne	.-38     	; 0x3cd2 <main+0x16f8>
    3cf8:	14 c0       	rjmp	.+40     	; 0x3d22 <main+0x1748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    3cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    3cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    3d00:	98 8d       	ldd	r25, Y+24	; 0x18
    3d02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	9c 8b       	std	Y+20, r25	; 0x14
    3d0c:	8b 8b       	std	Y+19, r24	; 0x13
    3d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d10:	9c 89       	ldd	r25, Y+20	; 0x14
    3d12:	98 8b       	std	Y+16, r25	; 0x10
    3d14:	8f 87       	std	Y+15, r24	; 0x0f
    3d16:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d18:	98 89       	ldd	r25, Y+16	; 0x10
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	f1 f7       	brne	.-4      	; 0x3d1a <main+0x1740>
    3d1e:	98 8b       	std	Y+16, r25	; 0x10
    3d20:	8f 87       	std	Y+15, r24	; 0x0f
    	    	             _delay_ms(400);

    	    	             DIO_voidSetPinValue(DIO_PORTC,DIO_PIN7,PIN_VAL_LOW);
    3d22:	82 e0       	ldi	r24, 0x02	; 2
    3d24:	67 e0       	ldi	r22, 0x07	; 7
    3d26:	40 e0       	ldi	r20, 0x00	; 0
    3d28:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <DIO_voidSetPinValue>
    	    	              DIO_voidSetPortValue(DIO_PORTD,0b00000000);
    3d2c:	83 e0       	ldi	r24, 0x03	; 3
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_voidSetPortValue>
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	a8 ec       	ldi	r26, 0xC8	; 200
    3d3a:	b3 e4       	ldi	r27, 0x43	; 67
    3d3c:	8b 87       	std	Y+11, r24	; 0x0b
    3d3e:	9c 87       	std	Y+12, r25	; 0x0c
    3d40:	ad 87       	std	Y+13, r26	; 0x0d
    3d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	4a ef       	ldi	r20, 0xFA	; 250
    3d52:	54 e4       	ldi	r21, 0x44	; 68
    3d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	8f 83       	std	Y+7, r24	; 0x07
    3d5e:	98 87       	std	Y+8, r25	; 0x08
    3d60:	a9 87       	std	Y+9, r26	; 0x09
    3d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d64:	6f 81       	ldd	r22, Y+7	; 0x07
    3d66:	78 85       	ldd	r23, Y+8	; 0x08
    3d68:	89 85       	ldd	r24, Y+9	; 0x09
    3d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e8       	ldi	r20, 0x80	; 128
    3d72:	5f e3       	ldi	r21, 0x3F	; 63
    3d74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3d78:	88 23       	and	r24, r24
    3d7a:	2c f4       	brge	.+10     	; 0x3d86 <main+0x17ac>
		__ticks = 1;
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
    3d84:	40 c0       	rjmp	.+128    	; 0x3e06 <main+0x182c>
	else if (__tmp > 65535)
    3d86:	6f 81       	ldd	r22, Y+7	; 0x07
    3d88:	78 85       	ldd	r23, Y+8	; 0x08
    3d8a:	89 85       	ldd	r24, Y+9	; 0x09
    3d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	3f ef       	ldi	r19, 0xFF	; 255
    3d92:	4f e7       	ldi	r20, 0x7F	; 127
    3d94:	57 e4       	ldi	r21, 0x47	; 71
    3d96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d9a:	18 16       	cp	r1, r24
    3d9c:	54 f5       	brge	.+84     	; 0x3df2 <main+0x1818>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	40 e2       	ldi	r20, 0x20	; 32
    3dac:	51 e4       	ldi	r21, 0x41	; 65
    3dae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	bc 01       	movw	r22, r24
    3db8:	cd 01       	movw	r24, r26
    3dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	9e 83       	std	Y+6, r25	; 0x06
    3dc4:	8d 83       	std	Y+5, r24	; 0x05
    3dc6:	0f c0       	rjmp	.+30     	; 0x3de6 <main+0x180c>
    3dc8:	88 ec       	ldi	r24, 0xC8	; 200
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	9c 83       	std	Y+4, r25	; 0x04
    3dce:	8b 83       	std	Y+3, r24	; 0x03
    3dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd4:	01 97       	sbiw	r24, 0x01	; 1
    3dd6:	f1 f7       	brne	.-4      	; 0x3dd4 <main+0x17fa>
    3dd8:	9c 83       	std	Y+4, r25	; 0x04
    3dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dde:	9e 81       	ldd	r25, Y+6	; 0x06
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	9e 83       	std	Y+6, r25	; 0x06
    3de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de6:	8d 81       	ldd	r24, Y+5	; 0x05
    3de8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	69 f7       	brne	.-38     	; 0x3dc8 <main+0x17ee>
    3dee:	0c 94 c6 13 	jmp	0x278c	; 0x278c <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df2:	6f 81       	ldd	r22, Y+7	; 0x07
    3df4:	78 85       	ldd	r23, Y+8	; 0x08
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	9e 83       	std	Y+6, r25	; 0x06
    3e04:	8d 83       	std	Y+5, r24	; 0x05
    3e06:	8d 81       	ldd	r24, Y+5	; 0x05
    3e08:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0a:	9a 83       	std	Y+2, r25	; 0x02
    3e0c:	89 83       	std	Y+1, r24	; 0x01
    3e0e:	89 81       	ldd	r24, Y+1	; 0x01
    3e10:	9a 81       	ldd	r25, Y+2	; 0x02
    3e12:	01 97       	sbiw	r24, 0x01	; 1
    3e14:	f1 f7       	brne	.-4      	; 0x3e12 <main+0x1838>
    3e16:	9a 83       	std	Y+2, r25	; 0x02
    3e18:	89 83       	std	Y+1, r24	; 0x01
    3e1a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <main+0x1b2>

00003e1e <__udivmodhi4>:
    3e1e:	aa 1b       	sub	r26, r26
    3e20:	bb 1b       	sub	r27, r27
    3e22:	51 e1       	ldi	r21, 0x11	; 17
    3e24:	07 c0       	rjmp	.+14     	; 0x3e34 <__udivmodhi4_ep>

00003e26 <__udivmodhi4_loop>:
    3e26:	aa 1f       	adc	r26, r26
    3e28:	bb 1f       	adc	r27, r27
    3e2a:	a6 17       	cp	r26, r22
    3e2c:	b7 07       	cpc	r27, r23
    3e2e:	10 f0       	brcs	.+4      	; 0x3e34 <__udivmodhi4_ep>
    3e30:	a6 1b       	sub	r26, r22
    3e32:	b7 0b       	sbc	r27, r23

00003e34 <__udivmodhi4_ep>:
    3e34:	88 1f       	adc	r24, r24
    3e36:	99 1f       	adc	r25, r25
    3e38:	5a 95       	dec	r21
    3e3a:	a9 f7       	brne	.-22     	; 0x3e26 <__udivmodhi4_loop>
    3e3c:	80 95       	com	r24
    3e3e:	90 95       	com	r25
    3e40:	bc 01       	movw	r22, r24
    3e42:	cd 01       	movw	r24, r26
    3e44:	08 95       	ret

00003e46 <__prologue_saves__>:
    3e46:	2f 92       	push	r2
    3e48:	3f 92       	push	r3
    3e4a:	4f 92       	push	r4
    3e4c:	5f 92       	push	r5
    3e4e:	6f 92       	push	r6
    3e50:	7f 92       	push	r7
    3e52:	8f 92       	push	r8
    3e54:	9f 92       	push	r9
    3e56:	af 92       	push	r10
    3e58:	bf 92       	push	r11
    3e5a:	cf 92       	push	r12
    3e5c:	df 92       	push	r13
    3e5e:	ef 92       	push	r14
    3e60:	ff 92       	push	r15
    3e62:	0f 93       	push	r16
    3e64:	1f 93       	push	r17
    3e66:	cf 93       	push	r28
    3e68:	df 93       	push	r29
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62
    3e6e:	ca 1b       	sub	r28, r26
    3e70:	db 0b       	sbc	r29, r27
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	09 94       	ijmp

00003e7e <__epilogue_restores__>:
    3e7e:	2a 88       	ldd	r2, Y+18	; 0x12
    3e80:	39 88       	ldd	r3, Y+17	; 0x11
    3e82:	48 88       	ldd	r4, Y+16	; 0x10
    3e84:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e86:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e88:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e90:	b9 84       	ldd	r11, Y+9	; 0x09
    3e92:	c8 84       	ldd	r12, Y+8	; 0x08
    3e94:	df 80       	ldd	r13, Y+7	; 0x07
    3e96:	ee 80       	ldd	r14, Y+6	; 0x06
    3e98:	fd 80       	ldd	r15, Y+5	; 0x05
    3e9a:	0c 81       	ldd	r16, Y+4	; 0x04
    3e9c:	1b 81       	ldd	r17, Y+3	; 0x03
    3e9e:	aa 81       	ldd	r26, Y+2	; 0x02
    3ea0:	b9 81       	ldd	r27, Y+1	; 0x01
    3ea2:	ce 0f       	add	r28, r30
    3ea4:	d1 1d       	adc	r29, r1
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	f8 94       	cli
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	0f be       	out	0x3f, r0	; 63
    3eae:	cd bf       	out	0x3d, r28	; 61
    3eb0:	ed 01       	movw	r28, r26
    3eb2:	08 95       	ret

00003eb4 <_exit>:
    3eb4:	f8 94       	cli

00003eb6 <__stop_program>:
    3eb6:	ff cf       	rjmp	.-2      	; 0x3eb6 <__stop_program>
